{"version":3,"sources":["ng://angular6-odoo-jsonrpc/lib/angular6-odoo-jsonrpc.service.ts","ng://angular6-odoo-jsonrpc/lib/angular6-odoo-jsonrpc.module.ts"],"names":["Cookies","prototype","delete_sessionId","this","session_id","document","cookie","get_sessionId","split","filter","x","indexOf","map","pop","set_sessionId","val","Ng6OdooRPCService","http","JSON","parse","localStorage","getItem","lang","cookies","init","configs","odoo_server","http_auth","setOdooServer","setHttpAuth","sendRequest","url","params","body","buildRequest","post","headers","toPromise","then","handleOdooErrors","catch","handleHttpErrors","getServerInfo","getSessionInfo","login","db","password","$this","result","uid","context","user_context","setItem","stringify","Promise","reject","title","message","fullTrace","isLoggedIn","force","_this","resolve","length","logout","r","getDbList","searchRead","model","domain","fields","limit","offset","sort","updateContext","args","call","err","getContext","getServer","method","kwargs","assign","uniq_id_counter","shouldManageSessionId","HttpHeaders","Content-Type","X-Openerp-Session-Id","Authorization","btoa","jsonrpc","response","error","errorObj","code","data","name","debug","match","test","fault_code","type","shift","substr","replace","Injectable","providedIn","HttpClient","decorators","Inject","Angular6OdooJsonrpcModule","NgModule","imports"],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nclass Cookies { // cookies doesn't work with Android default browser / Ionic\n  private session_id: string = null;\n\n  delete_sessionId() {\n    this.session_id = null;\n    document.cookie = 'session_id=; expires=Wed, 29 Jun 2016 00:00:00 UTC';\n  }\n\n  get_sessionId() {\n    return document\n      .cookie.split('; ')\n      .filter(x => x.indexOf('session_id') === 0)\n      .map(x => x.split('=')[1])\n      .pop() || this.session_id || '';\n  }\n\n  set_sessionId(val: string) {\n    document.cookie = `session_id=${val}`;\n    this.session_id = val;\n  }\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Ng6OdooRPCService {\n  private cookies: Cookies;\n  private uniq_id_counter = 0;\n  private shouldManageSessionId = false; // try without first\n  private context: Object = JSON.parse(localStorage.getItem('user_context')) || {'lang': 'en_US'};\n  private headers: HttpHeaders;\n  private http_auth: string;\n  private odoo_server: string;\n\n  constructor(\n    @Inject(HttpClient) private http: HttpClient) {\n    this.cookies = new Cookies();\n  }\n\n  public init(configs: any) {\n    this.odoo_server = configs.odoo_server;\n    this.http_auth = configs.http_auth || null;\n  }\n\n  public setOdooServer(odoo_server: string) {\n    this.odoo_server = odoo_server;\n  }\n\n  public setHttpAuth(http_auth: string) {\n    this.http_auth = http_auth;\n  }\n\n  public sendRequest(url: string, params: Object): Promise<any> {\n    const body = this.buildRequest(url, params);\n    return this.http.post(this.odoo_server + url, body, {headers: this.headers})\n      .toPromise()\n      .then(this.handleOdooErrors)\n      .catch(this.handleHttpErrors);\n  }\n\n  public getServerInfo() {\n    return this.sendRequest('/web/webclient/version_info', {});\n  }\n\n  public getSessionInfo() {\n    return this.sendRequest('/web/session/get_session_info', {});\n  }\n\n  public login(db: string, login: string, password: string) {\n    const params = {\n      db: db,\n      login: login,\n      password: password\n    };\n    const $this = this;\n    return this.sendRequest('/web/session/authenticate', params).then(function (result: any) {\n      if (!result.uid) {\n        $this.cookies.delete_sessionId();\n        return Promise.reject({\n          title: 'wrong_login',\n          message: 'Username and password don\\'t match',\n          fullTrace: result\n        });\n      }\n      $this.context = result.user_context;\n      localStorage.setItem('user_context', JSON.stringify($this.context));\n      $this.cookies.set_sessionId(result.session_id);\n      return result;\n    });\n  }\n\n  public isLoggedIn(force: boolean = true) {\n    if (!force) {\n      return Promise.resolve(this.cookies.get_sessionId().length > 0);\n    }\n    return this.getSessionInfo().then((result: any) => {\n      this.cookies.set_sessionId(result.session_id);\n      return !!(result.uid);\n    });\n  }\n\n  public logout(force: boolean = true) {\n    this.cookies.delete_sessionId();\n    if (force) {\n      return this.getSessionInfo().then((r: any) => { // get db from sessionInfo\n        if (r.db) {\n          return this.login(r.db, '', '');\n        }\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  public getDbList() { // only use for odoo < 9.0\n    return this.sendRequest('/web/database/get_list', {});\n  }\n\n  public searchRead(model: string, domain: any, fields: any, limit: number, offset: number, context: any = {}, sort?: string) {\n    const params = {\n      model: model,\n      domain: domain,\n      fields: fields,\n      limit: limit,\n      offset: offset,\n      context: context || this.context,\n      sort: sort || ''\n    };\n    return this.sendRequest('/web/dataset/search_read', params);\n  }\n\n  public updateContext(context: any) {\n    localStorage.setItem('user_context', JSON.stringify(context));\n    const args = [[(<any>this.context).uid], context];\n    this.call('res.users', 'write', args, {})\n      .then(() => this.context = context)\n      .catch((err: any) => this.context = context);\n  }\n\n  public getContext() {\n    return this.context;\n  }\n\n  public getServer() {\n    return this.odoo_server;\n  }\n\n  public call(model: string, method: string, args: any, kwargs: any) {\n\n    kwargs = kwargs || {};\n    kwargs.context = kwargs.context || {};\n    (<any>Object).assign(kwargs.context, this.context);\n\n    const params = {\n      model: model,\n      method: method,\n      args: args,\n      kwargs: kwargs,\n    };\n    return this.sendRequest('/web/dataset/call_kw', params);\n  }\n\n  private buildRequest(url: string, params: any) {\n    this.uniq_id_counter += 1;\n    if (this.shouldManageSessionId) {\n      params.session_id = this.cookies.get_sessionId();\n    }\n\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Openerp-Session-Id': this.cookies.get_sessionId(),\n      'Authorization': 'Basic ' + btoa(`${this.http_auth}`)\n    });\n    return JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'call',\n      params: params, // payload\n    });\n  }\n\n  private handleOdooErrors(response: any) {\n    if (!response.error) {\n      return response.result;\n    }\n\n    const error = response.error;\n    const errorObj = {\n      title: '    ',\n      message: '',\n      fullTrace: error\n    };\n\n    if (error.code === 200 && error.message === 'Odoo Server Error' && error.data.name === 'werkzeug.exceptions.NotFound') {\n      errorObj.title = 'page_not_found';\n      errorObj.message = 'HTTP Error';\n    } else if ((error.code === 100 && error.message === 'Odoo Session Expired') || // v8\n      (error.code === 300 && error.message === 'OpenERP WebClient Error' && error.data.debug.match('SessionExpiredException')) // v7\n    ) {\n      errorObj.title = 'session_expired';\n      this.cookies.delete_sessionId();\n    } else if ((error.message === 'Odoo Server Error' && /FATAL:  database \"(.+)\" does not exist/.test(error.data.message))) {\n      errorObj.title = 'database_not_found';\n      errorObj.message = error.data.message;\n    } else if ((error.data.name === 'openerp.exceptions.AccessError')) {\n      errorObj.title = 'AccessError';\n      errorObj.message = error.data.message;\n    } else {\n      const split = ('' + error.data.fault_code).split('\\n')[0].split(' -- ');\n      if (split.length > 1) {\n        error.type = split.shift();\n        error.data.fault_code = error.data.fault_code.substr(error.type.length + 4);\n      }\n\n      if (error.code === 200 && error.type) {\n        errorObj.title = error.type;\n        errorObj.message = error.data.fault_code.replace(/\\n/g, '<br />');\n      } else {\n        errorObj.title = error.message;\n        errorObj.message = error.data.debug.replace(/\\n/g, '<br />');\n      }\n    }\n    return Promise.reject(errorObj);\n  }\n\n  private handleHttpErrors(error: any) {\n    return Promise.reject(error.message || error);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [\n  ],\n})\nexport class Angular6OdooJsonrpcModule { }\n"]}