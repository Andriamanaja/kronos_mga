/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class Cookies {
    constructor() {
        this.session_id = null;
    }
    /**
     * @return {?}
     */
    delete_sessionId() {
        this.session_id = null;
        document.cookie = 'session_id=; expires=Wed, 29 Jun 2016 00:00:00 UTC';
    }
    /**
     * @return {?}
     */
    get_sessionId() {
        return document
            .cookie.split('; ')
            .filter(x => x.indexOf('session_id') === 0)
            .map(x => x.split('=')[1])
            .pop() || this.session_id || '';
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set_sessionId(val) {
        document.cookie = `session_id=${val}`;
        this.session_id = val;
    }
}
function Cookies_tsickle_Closure_declarations() {
    /** @type {?} */
    Cookies.prototype.session_id;
}
export class Ng6OdooRPCService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.uniq_id_counter = 0;
        this.shouldManageSessionId = false;
        this.context = JSON.parse(localStorage.getItem('user_context')) || { 'lang': 'en_US' };
        this.cookies = new Cookies();
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    init(configs) {
        this.odoo_server = configs.odoo_server;
        this.http_auth = configs.http_auth || null;
    }
    /**
     * @param {?} odoo_server
     * @return {?}
     */
    setOdooServer(odoo_server) {
        this.odoo_server = odoo_server;
    }
    /**
     * @param {?} http_auth
     * @return {?}
     */
    setHttpAuth(http_auth) {
        this.http_auth = http_auth;
    }
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    sendRequest(url, params) {
        const /** @type {?} */ body = this.buildRequest(url, params);
        return this.http.post(this.odoo_server + url, body, { headers: this.headers })
            .toPromise()
            .then(this.handleOdooErrors)
            .catch(this.handleHttpErrors);
    }
    /**
     * @return {?}
     */
    getServerInfo() {
        return this.sendRequest('/web/webclient/version_info', {});
    }
    /**
     * @return {?}
     */
    getSessionInfo() {
        return this.sendRequest('/web/session/get_session_info', {});
    }
    /**
     * @param {?} db
     * @param {?} login
     * @param {?} password
     * @return {?}
     */
    login(db, login, password) {
        const /** @type {?} */ params = {
            db: db,
            login: login,
            password: password
        };
        const /** @type {?} */ $this = this;
        return this.sendRequest('/web/session/authenticate', params).then(function (result) {
            if (!result.uid) {
                $this.cookies.delete_sessionId();
                return Promise.reject({
                    title: 'wrong_login',
                    message: 'Username and password don\'t match',
                    fullTrace: result
                });
            }
            $this.context = result.user_context;
            localStorage.setItem('user_context', JSON.stringify($this.context));
            $this.cookies.set_sessionId(result.session_id);
            return result;
        });
    }
    /**
     * @param {?=} force
     * @return {?}
     */
    isLoggedIn(force = true) {
        if (!force) {
            return Promise.resolve(this.cookies.get_sessionId().length > 0);
        }
        return this.getSessionInfo().then((result) => {
            this.cookies.set_sessionId(result.session_id);
            return !!(result.uid);
        });
    }
    /**
     * @param {?=} force
     * @return {?}
     */
    logout(force = true) {
        this.cookies.delete_sessionId();
        if (force) {
            return this.getSessionInfo().then((r) => {
                // get db from sessionInfo
                if (r.db) {
                    return this.login(r.db, '', '');
                }
            });
        }
        else {
            return Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    getDbList() {
        // only use for odoo < 9.0
        return this.sendRequest('/web/database/get_list', {});
    }
    /**
     * @param {?} model
     * @param {?} domain
     * @param {?} fields
     * @param {?} limit
     * @param {?} offset
     * @param {?=} context
     * @param {?=} sort
     * @return {?}
     */
    searchRead(model, domain, fields, limit, offset, context = {}, sort) {
        const /** @type {?} */ params = {
            model: model,
            domain: domain,
            fields: fields,
            limit: limit,
            offset: offset,
            context: context || this.context,
            sort: sort || ''
        };
        return this.sendRequest('/web/dataset/search_read', params);
    }
    /**
     * @param {?} context
     * @return {?}
     */
    updateContext(context) {
        localStorage.setItem('user_context', JSON.stringify(context));
        const /** @type {?} */ args = [[(/** @type {?} */ (this.context)).uid], context];
        this.call('res.users', 'write', args, {})
            .then(() => this.context = context)
            .catch((err) => this.context = context);
    }
    /**
     * @return {?}
     */
    getContext() {
        return this.context;
    }
    /**
     * @return {?}
     */
    getServer() {
        return this.odoo_server;
    }
    /**
     * @param {?} model
     * @param {?} method
     * @param {?} args
     * @param {?} kwargs
     * @return {?}
     */
    call(model, method, args, kwargs) {
        kwargs = kwargs || {};
        kwargs.context = kwargs.context || {};
        (/** @type {?} */ (Object)).assign(kwargs.context, this.context);
        const /** @type {?} */ params = {
            model: model,
            method: method,
            args: args,
            kwargs: kwargs,
        };
        return this.sendRequest('/web/dataset/call_kw', params);
    }
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    buildRequest(url, params) {
        this.uniq_id_counter += 1;
        if (this.shouldManageSessionId) {
            params.session_id = this.cookies.get_sessionId();
        }
        this.headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'X-Openerp-Session-Id': this.cookies.get_sessionId(),
            'Authorization': 'Basic ' + btoa(`${this.http_auth}`)
        });
        return JSON.stringify({
            jsonrpc: '2.0',
            method: 'call',
            params: params,
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    handleOdooErrors(response) {
        if (!response.error) {
            return response.result;
        }
        const /** @type {?} */ error = response.error;
        const /** @type {?} */ errorObj = {
            title: '    ',
            message: '',
            fullTrace: error
        };
        if (error.code === 200 && error.message === 'Odoo Server Error' && error.data.name === 'werkzeug.exceptions.NotFound') {
            errorObj.title = 'page_not_found';
            errorObj.message = 'HTTP Error';
        }
        else if ((error.code === 100 && error.message === 'Odoo Session Expired') || // v8
            // v8
            (error.code === 300 && error.message === 'OpenERP WebClient Error' && error.data.debug.match('SessionExpiredException')) // v7
        ) {
            errorObj.title = 'session_expired';
            this.cookies.delete_sessionId();
        }
        else if ((error.message === 'Odoo Server Error' && /FATAL:  database "(.+)" does not exist/.test(error.data.message))) {
            errorObj.title = 'database_not_found';
            errorObj.message = error.data.message;
        }
        else if ((error.data.name === 'openerp.exceptions.AccessError')) {
            errorObj.title = 'AccessError';
            errorObj.message = error.data.message;
        }
        else {
            const /** @type {?} */ split = ('' + error.data.fault_code).split('\n')[0].split(' -- ');
            if (split.length > 1) {
                error.type = split.shift();
                error.data.fault_code = error.data.fault_code.substr(error.type.length + 4);
            }
            if (error.code === 200 && error.type) {
                errorObj.title = error.type;
                errorObj.message = error.data.fault_code.replace(/\n/g, '<br />');
            }
            else {
                errorObj.title = error.message;
                errorObj.message = error.data.debug.replace(/\n/g, '<br />');
            }
        }
        return Promise.reject(errorObj);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleHttpErrors(error) {
        return Promise.reject(error.message || error);
    }
}
Ng6OdooRPCService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
Ng6OdooRPCService.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] }
];
/** @nocollapse */ Ng6OdooRPCService.ngInjectableDef = i0.defineInjectable({ factory: function Ng6OdooRPCService_Factory() { return new Ng6OdooRPCService(i0.inject(i1.HttpClient)); }, token: Ng6OdooRPCService, providedIn: "root" });
function Ng6OdooRPCService_tsickle_Closure_declarations() {
    /** @type {?} */
    Ng6OdooRPCService.prototype.cookies;
    /** @type {?} */
    Ng6OdooRPCService.prototype.uniq_id_counter;
    /** @type {?} */
    Ng6OdooRPCService.prototype.shouldManageSessionId;
    /** @type {?} */
    Ng6OdooRPCService.prototype.context;
    /** @type {?} */
    Ng6OdooRPCService.prototype.headers;
    /** @type {?} */
    Ng6OdooRPCService.prototype.http_auth;
    /** @type {?} */
    Ng6OdooRPCService.prototype.odoo_server;
    /** @type {?} */
    Ng6OdooRPCService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,