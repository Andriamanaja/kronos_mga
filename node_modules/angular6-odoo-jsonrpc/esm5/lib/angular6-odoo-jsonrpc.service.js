/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var Cookies = /** @class */ (function () {
    function Cookies() {
        this.session_id = null;
    }
    /**
     * @return {?}
     */
    Cookies.prototype.delete_sessionId = /**
     * @return {?}
     */
    function () {
        this.session_id = null;
        document.cookie = 'session_id=; expires=Wed, 29 Jun 2016 00:00:00 UTC';
    };
    /**
     * @return {?}
     */
    Cookies.prototype.get_sessionId = /**
     * @return {?}
     */
    function () {
        return document
            .cookie.split('; ')
            .filter(function (x) { return x.indexOf('session_id') === 0; })
            .map(function (x) { return x.split('=')[1]; })
            .pop() || this.session_id || '';
    };
    /**
     * @param {?} val
     * @return {?}
     */
    Cookies.prototype.set_sessionId = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        document.cookie = "session_id=" + val;
        this.session_id = val;
    };
    return Cookies;
}());
function Cookies_tsickle_Closure_declarations() {
    /** @type {?} */
    Cookies.prototype.session_id;
}
var Ng6OdooRPCService = /** @class */ (function () {
    function Ng6OdooRPCService(http) {
        this.http = http;
        this.uniq_id_counter = 0;
        this.shouldManageSessionId = false;
        this.context = JSON.parse(localStorage.getItem('user_context')) || { 'lang': 'en_US' };
        this.cookies = new Cookies();
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    Ng6OdooRPCService.prototype.init = /**
     * @param {?} configs
     * @return {?}
     */
    function (configs) {
        this.odoo_server = configs.odoo_server;
        this.http_auth = configs.http_auth || null;
    };
    /**
     * @param {?} odoo_server
     * @return {?}
     */
    Ng6OdooRPCService.prototype.setOdooServer = /**
     * @param {?} odoo_server
     * @return {?}
     */
    function (odoo_server) {
        this.odoo_server = odoo_server;
    };
    /**
     * @param {?} http_auth
     * @return {?}
     */
    Ng6OdooRPCService.prototype.setHttpAuth = /**
     * @param {?} http_auth
     * @return {?}
     */
    function (http_auth) {
        this.http_auth = http_auth;
    };
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    Ng6OdooRPCService.prototype.sendRequest = /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    function (url, params) {
        var /** @type {?} */ body = this.buildRequest(url, params);
        return this.http.post(this.odoo_server + url, body, { headers: this.headers })
            .toPromise()
            .then(this.handleOdooErrors)
            .catch(this.handleHttpErrors);
    };
    /**
     * @return {?}
     */
    Ng6OdooRPCService.prototype.getServerInfo = /**
     * @return {?}
     */
    function () {
        return this.sendRequest('/web/webclient/version_info', {});
    };
    /**
     * @return {?}
     */
    Ng6OdooRPCService.prototype.getSessionInfo = /**
     * @return {?}
     */
    function () {
        return this.sendRequest('/web/session/get_session_info', {});
    };
    /**
     * @param {?} db
     * @param {?} login
     * @param {?} password
     * @return {?}
     */
    Ng6OdooRPCService.prototype.login = /**
     * @param {?} db
     * @param {?} login
     * @param {?} password
     * @return {?}
     */
    function (db, login, password) {
        var /** @type {?} */ params = {
            db: db,
            login: login,
            password: password
        };
        var /** @type {?} */ $this = this;
        return this.sendRequest('/web/session/authenticate', params).then(function (result) {
            if (!result.uid) {
                $this.cookies.delete_sessionId();
                return Promise.reject({
                    title: 'wrong_login',
                    message: 'Username and password don\'t match',
                    fullTrace: result
                });
            }
            $this.context = result.user_context;
            localStorage.setItem('user_context', JSON.stringify($this.context));
            $this.cookies.set_sessionId(result.session_id);
            return result;
        });
    };
    /**
     * @param {?=} force
     * @return {?}
     */
    Ng6OdooRPCService.prototype.isLoggedIn = /**
     * @param {?=} force
     * @return {?}
     */
    function (force) {
        var _this = this;
        if (force === void 0) { force = true; }
        if (!force) {
            return Promise.resolve(this.cookies.get_sessionId().length > 0);
        }
        return this.getSessionInfo().then(function (result) {
            _this.cookies.set_sessionId(result.session_id);
            return !!(result.uid);
        });
    };
    /**
     * @param {?=} force
     * @return {?}
     */
    Ng6OdooRPCService.prototype.logout = /**
     * @param {?=} force
     * @return {?}
     */
    function (force) {
        var _this = this;
        if (force === void 0) { force = true; }
        this.cookies.delete_sessionId();
        if (force) {
            return this.getSessionInfo().then(function (r) {
                // get db from sessionInfo
                if (r.db) {
                    return _this.login(r.db, '', '');
                }
            });
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * @return {?}
     */
    Ng6OdooRPCService.prototype.getDbList = /**
     * @return {?}
     */
    function () {
        // only use for odoo < 9.0
        return this.sendRequest('/web/database/get_list', {});
    };
    /**
     * @param {?} model
     * @param {?} domain
     * @param {?} fields
     * @param {?} limit
     * @param {?} offset
     * @param {?=} context
     * @param {?=} sort
     * @return {?}
     */
    Ng6OdooRPCService.prototype.searchRead = /**
     * @param {?} model
     * @param {?} domain
     * @param {?} fields
     * @param {?} limit
     * @param {?} offset
     * @param {?=} context
     * @param {?=} sort
     * @return {?}
     */
    function (model, domain, fields, limit, offset, context, sort) {
        if (context === void 0) { context = {}; }
        var /** @type {?} */ params = {
            model: model,
            domain: domain,
            fields: fields,
            limit: limit,
            offset: offset,
            context: context || this.context,
            sort: sort || ''
        };
        return this.sendRequest('/web/dataset/search_read', params);
    };
    /**
     * @param {?} context
     * @return {?}
     */
    Ng6OdooRPCService.prototype.updateContext = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        localStorage.setItem('user_context', JSON.stringify(context));
        var /** @type {?} */ args = [[(/** @type {?} */ (this.context)).uid], context];
        this.call('res.users', 'write', args, {})
            .then(function () { return _this.context = context; })
            .catch(function (err) { return _this.context = context; });
    };
    /**
     * @return {?}
     */
    Ng6OdooRPCService.prototype.getContext = /**
     * @return {?}
     */
    function () {
        return this.context;
    };
    /**
     * @return {?}
     */
    Ng6OdooRPCService.prototype.getServer = /**
     * @return {?}
     */
    function () {
        return this.odoo_server;
    };
    /**
     * @param {?} model
     * @param {?} method
     * @param {?} args
     * @param {?} kwargs
     * @return {?}
     */
    Ng6OdooRPCService.prototype.call = /**
     * @param {?} model
     * @param {?} method
     * @param {?} args
     * @param {?} kwargs
     * @return {?}
     */
    function (model, method, args, kwargs) {
        kwargs = kwargs || {};
        kwargs.context = kwargs.context || {};
        (/** @type {?} */ (Object)).assign(kwargs.context, this.context);
        var /** @type {?} */ params = {
            model: model,
            method: method,
            args: args,
            kwargs: kwargs,
        };
        return this.sendRequest('/web/dataset/call_kw', params);
    };
    /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    Ng6OdooRPCService.prototype.buildRequest = /**
     * @param {?} url
     * @param {?} params
     * @return {?}
     */
    function (url, params) {
        this.uniq_id_counter += 1;
        if (this.shouldManageSessionId) {
            params.session_id = this.cookies.get_sessionId();
        }
        this.headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'X-Openerp-Session-Id': this.cookies.get_sessionId(),
            'Authorization': 'Basic ' + btoa("" + this.http_auth)
        });
        return JSON.stringify({
            jsonrpc: '2.0',
            method: 'call',
            params: params,
        });
    };
    /**
     * @param {?} response
     * @return {?}
     */
    Ng6OdooRPCService.prototype.handleOdooErrors = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        if (!response.error) {
            return response.result;
        }
        var /** @type {?} */ error = response.error;
        var /** @type {?} */ errorObj = {
            title: '    ',
            message: '',
            fullTrace: error
        };
        if (error.code === 200 && error.message === 'Odoo Server Error' && error.data.name === 'werkzeug.exceptions.NotFound') {
            errorObj.title = 'page_not_found';
            errorObj.message = 'HTTP Error';
        }
        else if ((error.code === 100 && error.message === 'Odoo Session Expired') || // v8
            // v8
            (error.code === 300 && error.message === 'OpenERP WebClient Error' && error.data.debug.match('SessionExpiredException')) // v7
        ) {
            errorObj.title = 'session_expired';
            this.cookies.delete_sessionId();
        }
        else if ((error.message === 'Odoo Server Error' && /FATAL:  database "(.+)" does not exist/.test(error.data.message))) {
            errorObj.title = 'database_not_found';
            errorObj.message = error.data.message;
        }
        else if ((error.data.name === 'openerp.exceptions.AccessError')) {
            errorObj.title = 'AccessError';
            errorObj.message = error.data.message;
        }
        else {
            var /** @type {?} */ split = ('' + error.data.fault_code).split('\n')[0].split(' -- ');
            if (split.length > 1) {
                error.type = split.shift();
                error.data.fault_code = error.data.fault_code.substr(error.type.length + 4);
            }
            if (error.code === 200 && error.type) {
                errorObj.title = error.type;
                errorObj.message = error.data.fault_code.replace(/\n/g, '<br />');
            }
            else {
                errorObj.title = error.message;
                errorObj.message = error.data.debug.replace(/\n/g, '<br />');
            }
        }
        return Promise.reject(errorObj);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    Ng6OdooRPCService.prototype.handleHttpErrors = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return Promise.reject(error.message || error);
    };
    Ng6OdooRPCService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    Ng6OdooRPCService.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] }
    ]; };
    /** @nocollapse */ Ng6OdooRPCService.ngInjectableDef = i0.defineInjectable({ factory: function Ng6OdooRPCService_Factory() { return new Ng6OdooRPCService(i0.inject(i1.HttpClient)); }, token: Ng6OdooRPCService, providedIn: "root" });
    return Ng6OdooRPCService;
}());
export { Ng6OdooRPCService };
function Ng6OdooRPCService_tsickle_Closure_declarations() {
    /** @type {?} */
    Ng6OdooRPCService.prototype.cookies;
    /** @type {?} */
    Ng6OdooRPCService.prototype.uniq_id_counter;
    /** @type {?} */
    Ng6OdooRPCService.prototype.shouldManageSessionId;
    /** @type {?} */
    Ng6OdooRPCService.prototype.context;
    /** @type {?} */
    Ng6OdooRPCService.prototype.headers;
    /** @type {?} */
    Ng6OdooRPCService.prototype.http_auth;
    /** @type {?} */
    Ng6OdooRPCService.prototype.odoo_server;
    /** @type {?} */
    Ng6OdooRPCService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,