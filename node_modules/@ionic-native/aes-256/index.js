var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AES256Original = /** @class */ (function (_super) {
    __extends(AES256Original, _super);
    function AES256Original() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256Original.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256Original.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256Original.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256Original.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256Original.pluginName = "AES256";
    AES256Original.plugin = "cordova-plugin-aes256-encryption";
    AES256Original.pluginRef = "cordova.plugins.AES256";
    AES256Original.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256Original.platforms = ["Android", "iOS"];
    AES256Original.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    return AES256Original;
}(IonicNativePlugin));
var AES256 = new AES256Original();
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Flcy0yNTYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBd0Q1QywwQkFBaUI7Ozs7SUFTM0Msd0JBQU8sYUFBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsSUFBWTtJQVl6RCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBV3pELGtDQUFpQixhQUFDLFFBQWdCO0lBV2xDLGlDQUFnQixhQUFDLFFBQWdCOzs7Ozs7O2lCQXBHbkM7RUF5RDRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQUVTMjU2XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgY29yZG92YSBpb25pYyBwbHVnaW4gYWxsb3dzIHlvdSB0byBwZXJmb3JtIEFFUyAyNTYgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBvbiB0aGUgcGxhaW4gdGV4dC5cbiAqIEl0J3MgYSBjcm9zcy1wbGF0Zm9ybSBwbHVnaW4gd2hpY2ggc3VwcG9ydHMgYm90aCBBbmRyb2lkIGFuZCBpT1MuXG4gKiBUaGUgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBhcmUgcGVyZm9ybWVkIG9uIHRoZSBkZXZpY2UgbmF0aXZlIGxheWVyIHNvIHRoYXQgdGhlIHBlcmZvcm1hbmNlIGlzIG11Y2ggZmFzdGVyLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQUVTMjU2IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9hZXMtMjU2L25neCc7XG4gKlxuICogcHJpdmF0ZSBzZWN1cmVLZXk6IHN0cmluZztcbiAqIHByaXZhdGUgc2VjdXJlSVY6IHN0cmluZztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFlczI1NjogQUVTMjU2KSB7XG4gKiAgICB0aGlzLmdlbmVyYXRlU2VjdXJlS2V5QW5kSVYoKTsgLy8gVG8gZ2VuZXJhdGUgdGhlIHJhbmRvbSBzZWN1cmVLZXkgYW5kIHNlY3VyZUlWXG4gKiB9XG4gKlxuICogLi4uXG4gKlxuICogYXN5bmMgZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpIHtcbiAqICAgIHRoaXMuc2VjdXJlS2V5ID0gYXdhaXQgdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMzIgYnl0ZXMgc3RyaW5nXG4gKiAgICB0aGlzLnNlY3VyZUlWID0gYXdhaXQgdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVJVigncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAxNiBieXRlcyBzdHJpbmdcbiAqIH1cbiAqXG4gKiB0aGlzLmFlczI1Ni5lbmNyeXB0KHRoaXMuc2VjdXJlS2V5LCB0aGlzLnNlY3VyZUlWLCAndGVzdGRhdGEnKVxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0VuY3J5cHRlZCBEYXRhOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuYWVzMjU2LmRlY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICdlbmNyeXB0ZWREYXRhJylcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdEZWNyeXB0ZWQgRGF0YSA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqICogdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVLZXkoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIEtleSA6ICcscmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICpcbiAqICogdGhpcy5hZXMyNTYuZ2VuZXJhdGVTZWN1cmVJVigncmFuZG9tIHBhc3N3b3JkIDEyMzQ1JylcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKCdTZWN1cmUgSVYgOiAnLHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FFUzI1NicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkFFUzI1NicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vSWRlYXMySVQvY29yZG92YS1hZXMyNTYnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1hZXMyNTYtZW5jcnlwdGlvbidcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQUVTMjU2IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBlbmNyeXB0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBlbmNyeXB0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VjdXJlSVYgQSAxNiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbml0aWFsIHZlY3RvciBmb3IgQUVTMjU2IGVuY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgZW5jcnlwdGVkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGVuY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGVuY3J5cHRlZCBkYXRhLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBlbmNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gcGVyZm9ybSB0aGUgYWVzMjU2IGRlY3J5cHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZGVjcnlwdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgQW4gQUVTMjU2IGVuY3J5cHRlZCBkYXRhIHdoaWNoIHdpbGwgYmUgZGVjcnlwdGVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBkZWNyeXB0aW9uIGhhcHBlbnMuIFRoZSBzdWNjZXNzIHJlc3BvbnNlIHdpbGwgcmV0dXJucyBkZWNyeXB0ZWQgZGF0YS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVjcnlwdChzZWN1cmVLZXk6IHN0cmluZywgc2VjdXJlSVY6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIGtleSBiYXNlZCBvbiBhbiBwYXNzd29yZC4gUGVyZmVjdCBpZiB5b3Ugd2FudCB0byBkZWxlZ2F0ZSB0aGUga2V5IGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIEEgcmFuZG9tIHN0cmluZywgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGlucHV0IGZvciBhIFBCS0RGMiBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBrZXkgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUtleShwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIGEgc2VjdXJlIElWIGJhc2VkIG9uIGFuIHBhc3N3b3JkLiBQZXJmZWN0IGlmIHlvdSB3YW50IHRvIGRlbGVnYXRlIHRoZSBJViBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXG4gICAqIE1ha2Ugc3VyZSB0byBzYXZlIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBzb21ld2hlcmUgc28geW91ciBlbmNyeXB0ZWQgZGF0YSBjYW4gYmUgZGVjcnlwdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gSVYgaXMgZ2VuZXJhdGVkLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZW5lcmF0ZVNlY3VyZUlWKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG59XG4iXX0=