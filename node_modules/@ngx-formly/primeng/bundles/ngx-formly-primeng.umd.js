(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('primeng/inputtext'), require('primeng/inputtextarea'), require('primeng/checkbox'), require('primeng/radiobutton'), require('primeng/dropdown'), require('@ngx-formly/core'), require('@ngx-formly/core/select')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/primeng', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'primeng/inputtext', 'primeng/inputtextarea', 'primeng/checkbox', 'primeng/radiobutton', 'primeng/dropdown', '@ngx-formly/core', '@ngx-formly/core/select'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].primeng = {}),global.ng.core,global.ng.common,global.ng.forms,global.inputtext,global.inputtextarea,global.checkbox,global.radiobutton,global.dropdown,global.core$1,global.select));
}(this, (function (exports,core,common,forms,inputtext,inputtextarea,checkbox,radiobutton,dropdown,core$1,select) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldInput = /** @class */ (function (_super) {
        __extends(FormlyFieldInput, _super);
        function FormlyFieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldInput.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-primeng-input',
                        template: "\n    <input *ngIf=\"to.type !== 'number' else numberTmp\" pInputText [type]=\"to.type || 'text'\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" [class.ng-dirty]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" pInputText [formControl]=\"formControl\" [formlyAttributes]=\"field\" [class.ng-dirty]=\"showError\">\n    </ng-template>\n  "
                    }] }
        ];
        return FormlyFieldInput;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldCheckbox = /** @class */ (function (_super) {
        __extends(FormlyFieldCheckbox, _super);
        function FormlyFieldCheckbox() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: {
                    hideLabel: true,
                },
            };
            return _this;
        }
        FormlyFieldCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-primeng-checkbox',
                        template: "\n    <p-checkbox\n      [class.ng-dirty]=\"showError\"\n      binary=\"true\"\n      [label]=\"to.label\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      (onChange)=\"to.change && to.change(field, $event)\">\n    </p-checkbox>\n  "
                    }] }
        ];
        return FormlyFieldCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldRadio = /** @class */ (function (_super) {
        __extends(FormlyFieldRadio, _super);
        function FormlyFieldRadio() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: { options: [] },
            };
            return _this;
        }
        FormlyFieldRadio.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-primeng-radio',
                        template: "\n    <p-radioButton *ngFor=\"let option of to.options | formlySelectOptions:field | async\"\n      [class.ng-dirty]=\"showError\"\n      [name]=\"field.name || id\"\n      [formControl]=\"formControl\"\n      [label]=\"option.label\"\n      [value]=\"option.value\">\n    </p-radioButton>\n  "
                    }] }
        ];
        return FormlyFieldRadio;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldSelect = /** @class */ (function (_super) {
        __extends(FormlyFieldSelect, _super);
        function FormlyFieldSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: { options: [] },
            };
            return _this;
        }
        FormlyFieldSelect.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-primeng-select',
                        template: "\n    <p-dropdown\n      [class.ng-dirty]=\"showError\"\n      [placeholder]=\"to.placeholder\"\n      [options]=\"to.options | formlySelectOptions:field | async\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [showClear]=\"!to.required\"\n      (onChange)=\"to.change && to.change(field, $event)\">\n    </p-dropdown>\n  "
                    }] }
        ];
        return FormlyFieldSelect;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldTextArea = /** @class */ (function (_super) {
        __extends(FormlyFieldTextArea, _super);
        function FormlyFieldTextArea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldTextArea.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-primeng-textarea',
                        template: "\n    <textarea\n      [class.ng-dirty]=\"showError\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\" pInputTextarea></textarea>\n  "
                    }] }
        ];
        return FormlyFieldTextArea;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyWrapperFormField = /** @class */ (function (_super) {
        __extends(FormlyWrapperFormField, _super);
        function FormlyWrapperFormField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperFormField.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-primeng-form-field',
                        template: "\n    <div *ngIf=\"to.label && to.hideLabel !== true\" class=\"ui-widget\">\n      <label [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n    <ng-container #fieldComponent></ng-container>\n\n    <div class=\"ui-message ui-messages-error\" *ngIf=\"showError\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n    </div>\n  ",
                        styles: ["\n    .ui-messages-error {\n      margin: 0;\n      margin-top: 4px;\n    }\n  "]
                    }] }
        ];
        return FormlyWrapperFormField;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FIELD_TYPE_COMPONENTS = [
        // types
        FormlyFieldInput,
        FormlyFieldTextArea,
        FormlyFieldCheckbox,
        FormlyFieldRadio,
        FormlyFieldSelect,
        // wrappers
        FormlyWrapperFormField,
    ];
    /** @type {?} */
    var PRIME_NG_FORMLY_CONFIG = {
        types: [
            {
                name: 'input',
                component: FormlyFieldInput,
                wrappers: ['form-field'],
            },
            {
                name: 'checkbox',
                component: FormlyFieldCheckbox,
                wrappers: ['form-field'],
            },
            {
                name: 'textarea',
                component: FormlyFieldTextArea,
                wrappers: ['form-field'],
            },
            {
                name: 'radio',
                component: FormlyFieldRadio,
                wrappers: ['form-field'],
            },
            {
                name: 'select',
                component: FormlyFieldSelect,
                wrappers: ['form-field'],
            },
        ],
        wrappers: [
            { name: 'form-field', component: FormlyWrapperFormField },
        ],
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyPrimeNGModule = /** @class */ (function () {
        function FormlyPrimeNGModule() {
        }
        FormlyPrimeNGModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: FIELD_TYPE_COMPONENTS,
                        imports: [
                            common.CommonModule,
                            inputtext.InputTextModule,
                            inputtextarea.InputTextareaModule,
                            checkbox.CheckboxModule,
                            radiobutton.RadioButtonModule,
                            dropdown.DropdownModule,
                            forms.ReactiveFormsModule,
                            select.FormlySelectModule,
                            core$1.FormlyModule.forChild(PRIME_NG_FORMLY_CONFIG),
                        ],
                    },] }
        ];
        return FormlyPrimeNGModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyPrimeNGModule = FormlyPrimeNGModule;
    exports.FormlyFieldInput = FormlyFieldInput;
    exports.FormlyFieldCheckbox = FormlyFieldCheckbox;
    exports.FormlyFieldRadio = FormlyFieldRadio;
    exports.FormlyFieldSelect = FormlyFieldSelect;
    exports.FormlyFieldTextArea = FormlyFieldTextArea;
    exports.FormlyWrapperFormField = FormlyWrapperFormField;
    exports.ɵa = FIELD_TYPE_COMPONENTS;
    exports.ɵb = PRIME_NG_FORMLY_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-primeng.umd.js.map