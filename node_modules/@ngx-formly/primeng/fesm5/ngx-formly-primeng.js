import { __extends } from 'tslib';
import { Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { CheckboxModule } from 'primeng/checkbox';
import { RadioButtonModule } from 'primeng/radiobutton';
import { DropdownModule } from 'primeng/dropdown';
import { FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldInput = /** @class */ (function (_super) {
    __extends(FormlyFieldInput, _super);
    function FormlyFieldInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldInput.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-primeng-input',
                    template: "\n    <input *ngIf=\"to.type !== 'number' else numberTmp\" pInputText [type]=\"to.type || 'text'\" [formControl]=\"formControl\" [formlyAttributes]=\"field\" [class.ng-dirty]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" pInputText [formControl]=\"formControl\" [formlyAttributes]=\"field\" [class.ng-dirty]=\"showError\">\n    </ng-template>\n  "
                }] }
    ];
    return FormlyFieldInput;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldCheckbox, _super);
    function FormlyFieldCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                hideLabel: true,
            },
        };
        return _this;
    }
    FormlyFieldCheckbox.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-primeng-checkbox',
                    template: "\n    <p-checkbox\n      [class.ng-dirty]=\"showError\"\n      binary=\"true\"\n      [label]=\"to.label\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      (onChange)=\"to.change && to.change(field, $event)\">\n    </p-checkbox>\n  "
                }] }
    ];
    return FormlyFieldCheckbox;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldRadio = /** @class */ (function (_super) {
    __extends(FormlyFieldRadio, _super);
    function FormlyFieldRadio() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: { options: [] },
        };
        return _this;
    }
    FormlyFieldRadio.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-primeng-radio',
                    template: "\n    <p-radioButton *ngFor=\"let option of to.options | formlySelectOptions:field | async\"\n      [class.ng-dirty]=\"showError\"\n      [name]=\"field.name || id\"\n      [formControl]=\"formControl\"\n      [label]=\"option.label\"\n      [value]=\"option.value\">\n    </p-radioButton>\n  "
                }] }
    ];
    return FormlyFieldRadio;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldSelect = /** @class */ (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: { options: [] },
        };
        return _this;
    }
    FormlyFieldSelect.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-primeng-select',
                    template: "\n    <p-dropdown\n      [class.ng-dirty]=\"showError\"\n      [placeholder]=\"to.placeholder\"\n      [options]=\"to.options | formlySelectOptions:field | async\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [showClear]=\"!to.required\"\n      (onChange)=\"to.change && to.change(field, $event)\">\n    </p-dropdown>\n  "
                }] }
    ];
    return FormlyFieldSelect;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldTextArea = /** @class */ (function (_super) {
    __extends(FormlyFieldTextArea, _super);
    function FormlyFieldTextArea() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldTextArea.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-primeng-textarea',
                    template: "\n    <textarea\n      [class.ng-dirty]=\"showError\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\" pInputTextarea></textarea>\n  "
                }] }
    ];
    return FormlyFieldTextArea;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyWrapperFormField = /** @class */ (function (_super) {
    __extends(FormlyWrapperFormField, _super);
    function FormlyWrapperFormField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyWrapperFormField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-wrapper-primeng-form-field',
                    template: "\n    <div *ngIf=\"to.label && to.hideLabel !== true\" class=\"ui-widget\">\n      <label [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n    <ng-container #fieldComponent></ng-container>\n\n    <div class=\"ui-message ui-messages-error\" *ngIf=\"showError\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n    </div>\n  ",
                    styles: ["\n    .ui-messages-error {\n      margin: 0;\n      margin-top: 4px;\n    }\n  "]
                }] }
    ];
    return FormlyWrapperFormField;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldTextArea,
    FormlyFieldCheckbox,
    FormlyFieldRadio,
    FormlyFieldSelect,
    // wrappers
    FormlyWrapperFormField,
];
/** @type {?} */
var PRIME_NG_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['form-field'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['form-field'],
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['form-field'],
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: ['form-field'],
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['form-field'],
        },
    ],
    wrappers: [
        { name: 'form-field', component: FormlyWrapperFormField },
    ],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyPrimeNGModule = /** @class */ (function () {
    function FormlyPrimeNGModule() {
    }
    FormlyPrimeNGModule.decorators = [
        { type: NgModule, args: [{
                    declarations: FIELD_TYPE_COMPONENTS,
                    imports: [
                        CommonModule,
                        InputTextModule,
                        InputTextareaModule,
                        CheckboxModule,
                        RadioButtonModule,
                        DropdownModule,
                        ReactiveFormsModule,
                        FormlySelectModule,
                        FormlyModule.forChild(PRIME_NG_FORMLY_CONFIG),
                    ],
                },] }
    ];
    return FormlyPrimeNGModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyPrimeNGModule, FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldRadio, FormlyFieldSelect, FormlyFieldTextArea, FormlyWrapperFormField, FIELD_TYPE_COMPONENTS as ɵa, PRIME_NG_FORMLY_CONFIG as ɵb };

//# sourceMappingURL=ngx-formly-primeng.js.map