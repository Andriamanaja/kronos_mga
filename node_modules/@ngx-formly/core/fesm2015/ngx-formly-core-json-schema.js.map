{"version":3,"file":"ngx-formly-core-json-schema.js.map","sources":["ng://@ngx-formly/core/json-schema/formly-json-schema.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { JSONSchema7, JSONSchema7TypeName } from 'json-schema';\nimport { ÉµreverseDeepMerge as reverseDeepMerge } from '@ngx-formly/core';\nimport { AbstractControl, FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { pairwise, startWith } from 'rxjs/operators';\n\nexport interface FormlyJsonschemaOptions {\n  /**\n   * allows to intercept the mapping, taking the already mapped\n   * formly field and the original JSONSchema source from which it\n   * was mapped.\n   */\n  map?: (mappedField: FormlyFieldConfig, mapSource: JSONSchema7) => FormlyFieldConfig;\n}\n\nfunction isEmpty(v: any) {\n  return v === '' || v === undefined || v === null;\n}\n\nfunction isConst(schema: JSONSchema7) {\n  return schema.hasOwnProperty('const') || (schema.enum && schema.enum.length === 1);\n}\n\nfunction clearFieldModel(field: FormlyFieldConfig) {\n  if (field.key) {\n    field.formControl.patchValue(undefined);\n    field.formControl.markAsUntouched();\n    delete field.model[field.key];\n  } else if (field.fieldGroup) {\n    field.fieldGroup.forEach(f => clearFieldModel(f));\n  }\n}\n\nfunction checkField(field: FormlyFieldConfig) {\n  (field.options as any)._checkField(field);\n}\n\nfunction isFieldValid(field: FormlyFieldConfig): boolean {\n  if (field.key) {\n    return field.formControl.valid;\n  }\n\n  return field.fieldGroup.every(f => isFieldValid(f));\n}\n\ninterface IOptions extends FormlyJsonschemaOptions {\n  schema: JSONSchema7;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyJsonschema {\n  toFieldConfig(schema: JSONSchema7, options?: FormlyJsonschemaOptions): FormlyFieldConfig {\n    return this._toFieldConfig(schema, { schema, ...(options || {}) });\n  }\n\n  private _toFieldConfig(schema: JSONSchema7, options: IOptions): FormlyFieldConfig {\n    schema = this.resolveSchema(schema, options);\n\n    let field: FormlyFieldConfig = {\n      type: this.guessType(schema),\n      defaultValue: schema.default,\n      templateOptions: {\n        label: schema.title,\n        readonly: schema.readOnly,\n        description: schema.description,\n      },\n    };\n\n    switch (field.type) {\n      case 'null': {\n        this.addValidator(field, 'null', ({ value }) => value === null);\n        break;\n      }\n      case 'number':\n      case 'integer': {\n        field.parsers = [v => isEmpty(v) ? null : Number(v)];\n        if (schema.hasOwnProperty('minimum')) {\n          field.templateOptions.min = schema.minimum;\n        }\n\n        if (schema.hasOwnProperty('maximum')) {\n          field.templateOptions.max = schema.maximum;\n        }\n\n        if (schema.hasOwnProperty('exclusiveMinimum')) {\n          field.templateOptions.exclusiveMinimum = schema.exclusiveMinimum;\n          this.addValidator(field, 'exclusiveMinimum', ({ value }) => isEmpty(value) || (value > schema.exclusiveMinimum));\n        }\n\n        if (schema.hasOwnProperty('exclusiveMaximum')) {\n          field.templateOptions.exclusiveMaximum = schema.exclusiveMaximum;\n          this.addValidator(field, 'exclusiveMaximum', ({ value }) => isEmpty(value) || (value < schema.exclusiveMaximum));\n        }\n\n        if (schema.hasOwnProperty('multipleOf')) {\n          field.templateOptions.step = schema.multipleOf;\n          this.addValidator(field, 'multipleOf', ({ value }) => isEmpty(value) || (value % schema.multipleOf === 0));\n        }\n        break;\n      }\n      case 'string': {\n        const schemaType = schema.type as JSONSchema7TypeName;\n        if (Array.isArray(schemaType) && schemaType.includes('null')) {\n          field.parsers = [v => isEmpty(v) ? null : v];\n        }\n\n        ['minLength', 'maxLength', 'pattern'].forEach(prop => {\n          if (schema.hasOwnProperty(prop)) {\n            field.templateOptions[prop] = schema[prop];\n          }\n        });\n        break;\n      }\n      case 'object': {\n        field.fieldGroup = [];\n\n        const [propDeps, schemaDeps] = this.resolveDependencies(schema);\n        Object.keys(schema.properties || {}).forEach(key => {\n          const f = this._toFieldConfig(<JSONSchema7> schema.properties[key], options);\n          field.fieldGroup.push(f);\n          f.key = key;\n          if (Array.isArray(schema.required) && schema.required.indexOf(key) !== -1) {\n            f.templateOptions.required = true;\n          }\n          if (f.templateOptions && !f.templateOptions.required && propDeps[key]) {\n            f.expressionProperties = {\n              'templateOptions.required': m => m && propDeps[key].some(k => !isEmpty(m[k])),\n            };\n          }\n\n          if (schemaDeps[key]) {\n            const getConstValue = (s: JSONSchema7) => {\n              return s.hasOwnProperty('const') ? s.const : s.enum[0];\n            };\n\n            const oneOfSchema = schemaDeps[key].oneOf;\n            if (\n              oneOfSchema\n              && oneOfSchema.every(o => o.properties && o.properties[key] && isConst(o.properties[key]))\n            ) {\n              oneOfSchema.forEach(oneOfSchema => {\n                const { [key]: constSchema, ...properties } = oneOfSchema.properties;\n                field.fieldGroup.push({\n                  ...this._toFieldConfig({ ...oneOfSchema, properties }, options),\n                  hideExpression: m => !m || getConstValue(constSchema) !== m[key],\n                });\n              });\n            } else {\n              field.fieldGroup.push({\n                ...this._toFieldConfig(schemaDeps[key], options),\n                hideExpression: m => !m || isEmpty(m[key]),\n              });\n            }\n\n          }\n        });\n\n        if (schema.oneOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'oneOf',\n            <JSONSchema7[]> schema.oneOf,\n            options,\n          ));\n        }\n\n        if (schema.anyOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'anyOf',\n            <JSONSchema7[]> schema.anyOf,\n            options,\n          ));\n        }\n        break;\n      }\n      case 'array': {\n        if (schema.hasOwnProperty('minItems')) {\n          field.templateOptions.minItems = schema.minItems;\n          this.addValidator(field, 'minItems', ({ value }) => isEmpty(value) || (value.length >= schema.minItems));\n        }\n        if (schema.hasOwnProperty('maxItems')) {\n          field.templateOptions.maxItems = schema.maxItems;\n          this.addValidator(field, 'maxItems', ({ value }) => isEmpty(value) || (value.length <= schema.maxItems));\n        }\n        if (schema.hasOwnProperty('uniqueItems')) {\n          field.templateOptions.uniqueItems = schema.uniqueItems;\n          this.addValidator(field, 'uniqueItems', ({ value }) => {\n            if (isEmpty(value) || !schema.uniqueItems) {\n              return true;\n            }\n\n            const uniqueItems = Array.from(\n              new Set(value.map((v: any) => JSON.stringify(v))),\n            );\n\n            return uniqueItems.length === value.length;\n          });\n        }\n\n        // resolve items schema needed for isEnum check\n        if (schema.items && !Array.isArray(schema.items)) {\n          schema.items = this.resolveSchema(<JSONSchema7> schema.items, options);\n        }\n\n        // TODO: remove isEnum check once adding an option to skip extension\n        if (!this.isEnum(schema)) {\n          const _this = this;\n          Object.defineProperty(field, 'fieldArray', {\n            get: function() {\n              if (!Array.isArray(schema.items)) {\n                // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                return _this._toFieldConfig(<JSONSchema7> schema.items, options);\n              }\n\n              const length = this.fieldGroup ? this.fieldGroup.length : 0;\n              const itemSchema = schema.items[length]\n                ? schema.items[length]\n                : schema.additionalItems;\n\n              return itemSchema\n                ? _this._toFieldConfig(<JSONSchema7> itemSchema, options)\n                : {};\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n\n        break;\n      }\n    }\n\n    if (schema.hasOwnProperty('const')) {\n      field.templateOptions.const = schema.const;\n      this.addValidator(field, 'const', ({ value }) => value === schema.const);\n      if (!field.type) {\n        field.defaultValue = schema.const;\n      }\n    }\n\n    if (this.isEnum(schema)) {\n      field.templateOptions.multiple = field.type === 'array';\n      field.type = 'enum';\n      field.templateOptions.options = this.toEnumOptions(schema);\n    }\n\n    // map in possible formlyConfig options from the widget property\n    if (schema['widget'] && schema['widget'].formlyConfig) {\n      field = reverseDeepMerge(schema['widget'].formlyConfig, field);\n    }\n\n    // if there is a map function passed in, use it to allow the user to\n    // further customize how fields are being mapped\n    return options.map ? options.map(field, schema) : field;\n  }\n\n  private resolveSchema(schema: JSONSchema7, options: IOptions) {\n    if (schema.$ref) {\n      schema = this.resolveDefinition(schema, options);\n    }\n\n    if (schema.allOf) {\n      schema = this.resolveAllOf(schema, options);\n    }\n\n    return schema;\n  }\n\n  private resolveAllOf({ allOf, ...baseSchema }: JSONSchema7, options: IOptions) {\n    if (!allOf.length) {\n      throw Error(`allOf array can not be empty ${allOf}.`);\n    }\n\n    return allOf.reduce((base: JSONSchema7, schema: JSONSchema7) => {\n      schema = this.resolveSchema(schema, options);\n      if (base.required && schema.required) {\n        base.required = [...base.required, ...schema.required];\n      }\n\n      if (schema.uniqueItems) {\n        base.uniqueItems = schema.uniqueItems;\n      }\n\n      // resolve to min value\n      ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      // resolve to max value\n      ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      return reverseDeepMerge(base, schema);\n    }, baseSchema);\n  }\n\n  private resolveMultiSchema(\n    mode: 'oneOf' | 'anyOf',\n    schemas: JSONSchema7[],\n    options: IOptions,\n  ): FormlyFieldConfig {\n    let subscription: Subscription = null;\n\n    return {\n      type: 'multischema',\n      fieldGroup: [\n        {\n          type: 'enum',\n          templateOptions: {\n            multiple: mode === 'anyOf',\n            options: schemas\n              .map((s, i) => ({ label: s.title, value: i })),\n          },\n          hooks: {\n            onInit(f) {\n              const modeField = f.parent.fieldGroup[1];\n              const value = modeField.fieldGroup\n                .map((f, i) => isFieldValid(f) ? i : -1)\n                .filter(v => v !== -1)\n              ;\n\n              const normalizedValue = [value.length === 0 ? 0 : value[0]];\n              const formattedValue = mode === 'anyOf' ? normalizedValue : normalizedValue[0];\n              f.formControl = new FormControl(formattedValue);\n              setTimeout(() => checkField(modeField));\n\n              subscription = f.formControl.valueChanges.pipe(\n                startWith(formattedValue),\n                pairwise(),\n              ).subscribe(([p, q]) => {\n                if (Array.isArray(p)) {\n                  if (p.length >= q.length) {\n                    const indexToClear = p.find(v => !q.includes(v));\n                    clearFieldModel(modeField.fieldGroup[indexToClear]);\n                  }\n                } else {\n                  clearFieldModel(modeField);\n                }\n                checkField(modeField);\n              });\n            },\n            onDestroy() {\n              subscription && subscription.unsubscribe();\n            },\n          },\n        },\n        {\n          fieldGroup: schemas.map((s, i) => ({\n            ...this._toFieldConfig(s, options),\n            hideExpression: (m, fs, f) => {\n              const control = f.parent.parent.fieldGroup[0].formControl;\n              return !control || (Array.isArray(control.value)\n                  ? !control.value.includes(i)\n                  : control.value !== i);\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  private resolveDefinition(schema: JSONSchema7, options: IOptions): JSONSchema7 {\n    const [uri, pointer] = schema.$ref.split('#/');\n    if (uri) {\n      throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);\n    }\n\n    const definition = !pointer ? null : pointer.split('/').reduce(\n      (def, path) => def && def.hasOwnProperty(path) ? def[path] : null,\n      options.schema,\n    );\n\n    if (!definition) {\n      throw Error(`Cannot find a definition for ${schema.$ref}.`);\n    }\n\n    if (definition.$ref) {\n      return this.resolveDefinition(definition, options);\n    }\n\n    return {\n      ...definition,\n      ...['title', 'description', 'default'].reduce((annotation, p) => {\n        if (schema.hasOwnProperty(p)) {\n          annotation[p] = schema[p];\n        }\n\n        return annotation;\n      }, {}),\n    };\n  }\n\n  private resolveDependencies(schema: JSONSchema7) {\n    const deps = {};\n    const schemaDeps = {};\n\n    Object.keys(schema.dependencies || {}).forEach(prop => {\n      const dependency = schema.dependencies[prop] as JSONSchema7;\n      if (Array.isArray(dependency)) {\n        // Property dependencies\n        dependency.forEach(dep => {\n          if (!deps[dep]) {\n            deps[dep] = [prop];\n          } else {\n            deps[dep].push(prop);\n          }\n        });\n      } else {\n        // schema dependencies\n        schemaDeps[prop] = dependency;\n      }\n    });\n\n    return [deps, schemaDeps];\n  }\n\n  private guessType(schema: JSONSchema7) {\n    const type = schema.type as JSONSchema7TypeName;\n    if (!type && schema.properties) {\n      return 'object';\n    }\n\n    if (Array.isArray(type)) {\n      if (type.length === 1) {\n        return type[0];\n      }\n\n      if (type.length === 2 && type.indexOf('null') !== -1) {\n        return type[type[0] === 'null' ? 1 : 0];\n      }\n    }\n\n    return type;\n  }\n\n  private addValidator(field: FormlyFieldConfig, name: string, validator: (control: AbstractControl) => boolean) {\n    field.validators = field.validators || {};\n    field.validators[name] = validator;\n  }\n\n  private isEnum(schema: JSONSchema7) {\n    return schema.enum\n      || (schema.anyOf && schema.anyOf.every(isConst))\n      || (schema.oneOf && schema.oneOf.every(isConst))\n      || schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum(<JSONSchema7> schema.items);\n  }\n\n  private toEnumOptions(schema: JSONSchema7) {\n    if (schema.enum) {\n      return schema.enum.map(value => ({ value, label: value }));\n    }\n\n    const toEnum = (s: JSONSchema7) => {\n      const value = s.hasOwnProperty('const') ? s.const : s.enum[0];\n\n      return { value: value, label: s.title || value };\n    };\n\n    if (schema.anyOf) {\n      return schema.anyOf.map(toEnum);\n    }\n\n    if (schema.oneOf) {\n      return schema.oneOf.map(toEnum);\n    }\n\n    return this.toEnumOptions(<JSONSchema7> schema.items);\n  }\n}\n"],"names":["reverseDeepMerge"],"mappings":"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"}
