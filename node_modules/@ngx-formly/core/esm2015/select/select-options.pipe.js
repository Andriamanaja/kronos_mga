/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Observable, of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
export class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} field
     * @return {?}
     */
    transform(options, field) {
        if (!(options instanceof Observable)) {
            options = observableOf(options);
        }
        return ((/** @type {?} */ (options))).pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => this.toOptions(value, field || {}))));
    }
    /**
     * @private
     * @param {?} options
     * @param {?} field
     * @return {?}
     */
    toOptions(options, field) {
        /** @type {?} */
        const gOptions = [];
        /** @type {?} */
        const groups = {};
        /** @type {?} */
        const to = field.templateOptions || {};
        options.map((/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            if (!this.getGroupProp(option, to)) {
                gOptions.push(this.toOption(option, to));
            }
            else {
                if (!groups[this.getGroupProp(option, to)]) {
                    groups[this.getGroupProp(option, to)] = [];
                    gOptions.push({
                        label: this.getGroupProp(option, to),
                        group: groups[this.getGroupProp(option, to)],
                    });
                }
                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));
            }
        }));
        return gOptions;
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    toOption(item, to) {
        return {
            label: this.getLabelProp(item, to),
            value: this.getValueProp(item, to),
            disabled: this.getDisabledProp(item, to) || false,
        };
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getLabelProp(item, to) {
        if (typeof to.labelProp === 'function') {
            return to.labelProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);
            return item.value;
        }
        return item[to.labelProp || 'label'];
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getValueProp(item, to) {
        if (typeof to.valueProp === 'function') {
            return to.valueProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.key;
        }
        return item[to.valueProp || 'value'];
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getDisabledProp(item, to) {
        if (typeof to.disabledProp === 'function') {
            return to.disabledProp(item);
        }
        return item[to.disabledProp || 'disabled'];
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getGroupProp(item, to) {
        if (typeof to.groupProp === 'function') {
            return to.groupProp(item);
        }
        return item[to.groupProp || 'group'];
    }
    /**
     * @private
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    shouldUseLegacyOption(item, to) {
        return !to.valueProp
            && !to.labelProp
            && item != null
            && typeof item === 'object'
            && 'key' in item
            && 'value' in item;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0LyIsInNvdXJjZXMiOlsic2VsZWN0LW9wdGlvbnMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUlyQyxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7SUFDbEMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUF5QjtRQUMxQyxJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLEVBQUU7WUFDcEMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sQ0FBQyxtQkFBQSxPQUFPLEVBQW1CLENBQUMsQ0FBQyxJQUFJLENBQ3RDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBQyxDQUNqRCxDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVPLFNBQVMsQ0FBQyxPQUFPLEVBQUUsS0FBd0I7O2NBQzNDLFFBQVEsR0FBVSxFQUFFOztjQUN4QixNQUFNLEdBQTZCLEVBQUU7O2NBQ3JDLEVBQUUsR0FBRyxLQUFLLENBQUMsZUFBZSxJQUFJLEVBQUU7UUFFbEMsT0FBTyxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0s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LE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7Ozs7SUFFTyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNwQyxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVM7ZUFDZixDQUFDLEVBQUUsQ0FBQyxTQUFTO2VBQ2IsSUFBSSxJQUFJLElBQUk7ZUFDWixPQUFPLElBQUksS0FBSyxRQUFRO2VBQ3hCLEtBQUssSUFBSSxJQUFJO2VBQ2IsT0FBTyxJQUFJLElBQUksQ0FBQztJQUN2QixDQUFDOzs7WUExRkYsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgYXMgb2JzZXJ2YWJsZU9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuXG5AUGlwZSh7IG5hbWU6ICdmb3JtbHlTZWxlY3RPcHRpb25zJyB9KVxuZXhwb3J0IGNsYXNzIEZvcm1seVNlbGVjdE9wdGlvbnNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShvcHRpb25zLCBmaWVsZD86IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgaWYgKCEob3B0aW9ucyBpbnN0YW5jZW9mIE9ic2VydmFibGUpKSB7XG4gICAgICBvcHRpb25zID0gb2JzZXJ2YWJsZU9mKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiAob3B0aW9ucyBhcyBPYnNlcnZhYmxlPGFueT4pLnBpcGUoXG4gICAgICBtYXAodmFsdWUgPT4gdGhpcy50b09wdGlvbnModmFsdWUsIGZpZWxkIHx8IHt9KSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9PcHRpb25zKG9wdGlvbnMsIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgIGNvbnN0IGdPcHRpb25zOiBhbnlbXSA9IFtdLFxuICAgICAgZ3JvdXBzOiB7IFtrZXk6IHN0cmluZ106IGFueVtdIH0gPSB7fSxcbiAgICAgIHRvID0gZmllbGQudGVtcGxhdGVPcHRpb25zIHx8IHt9O1xuXG4gICAgb3B0aW9ucy5tYXAoKG9wdGlvbjogYW55KSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pKSB7XG4gICAgICAgIGdPcHRpb25zLnB1c2godGhpcy50b09wdGlvbihvcHRpb24sIHRvKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0pIHtcbiAgICAgICAgICBncm91cHNbdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byldID0gW107XG4gICAgICAgICAgZ09wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byksXG4gICAgICAgICAgICBncm91cDogZ3JvdXBzW3RoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBncm91cHNbdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byldLnB1c2godGhpcy50b09wdGlvbihvcHRpb24sIHRvKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ09wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIHRvT3B0aW9uKGl0ZW0sIHRvKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB0aGlzLmdldExhYmVsUHJvcChpdGVtLCB0byksXG4gICAgICB2YWx1ZTogdGhpcy5nZXRWYWx1ZVByb3AoaXRlbSwgdG8pLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMuZ2V0RGlzYWJsZWRQcm9wKGl0ZW0sIHRvKSB8fCBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMYWJlbFByb3AoaXRlbSwgdG8pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdG8ubGFiZWxQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdG8ubGFiZWxQcm9wKGl0ZW0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNob3VsZFVzZUxlZ2FjeU9wdGlvbihpdGVtLCB0bykpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTmd4Rm9ybWx5OiBsZWdhY3kgc2VsZWN0IG9wdGlvbiAne2tleSwgdmFsdWV9JyBpcyBkZXByZWNhdGVkIHNpbmNlIHY1LjUsIHVzZSAne3ZhbHVlLCBsYWJlbH0nIGluc3RlYWQuYCk7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by5sYWJlbFByb3AgfHwgJ2xhYmVsJ107XG4gIH1cblxuICBwcml2YXRlIGdldFZhbHVlUHJvcChpdGVtLCB0byk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0by52YWx1ZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0by52YWx1ZVByb3AoaXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSkge1xuICAgICAgcmV0dXJuIGl0ZW0ua2V5O1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtW3RvLnZhbHVlUHJvcCB8fCAndmFsdWUnXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGlzYWJsZWRQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmRpc2FibGVkUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmRpc2FibGVkUHJvcChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1bdG8uZGlzYWJsZWRQcm9wIHx8ICdkaXNhYmxlZCddO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHcm91cFByb3AoaXRlbSwgdG8pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdG8uZ3JvdXBQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdG8uZ3JvdXBQcm9wKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtW3RvLmdyb3VwUHJvcCB8fCAnZ3JvdXAnXTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSB7XG4gICAgcmV0dXJuICF0by52YWx1ZVByb3BcbiAgICAgICYmICF0by5sYWJlbFByb3BcbiAgICAgICYmIGl0ZW0gIT0gbnVsbFxuICAgICAgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnXG4gICAgICAmJiAna2V5JyBpbiBpdGVtXG4gICAgICAmJiAndmFsdWUnIGluIGl0ZW07XG4gIH1cbn1cbiJdfQ==