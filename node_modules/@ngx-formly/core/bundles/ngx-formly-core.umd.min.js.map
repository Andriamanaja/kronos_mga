{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","FORMLY_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","__values","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","reduce","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","currentValue","firstChange","set","previousValue","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","createComponent","instance","resolver","injector","cf","_componentFactory","hostView","destroyed","_componentFactoryResolver","getFieldInjector","component","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","_injector","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","buildForm","fieldGroup","core","_buildForm","_setOptions","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","immutable","parentFormGroup","modelChange","EventEmitter","modelChangeSubs","enableCheckExprDebounce","checkExpressionChange$","pipe","debounceTime","subscribe","checkExpressionChange","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","form","FormGroup","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","unsubscribe","changeModel","event","emit","resetModel","initialModel","k","control","resetForm","reset","_a","emitModelChange","_checkField","rootKey","control_1","valueChanges","modelOptions","updateOn","debounce","default","_onChange","patchValue","emitEvent","parsers","parserFn","tslib_1.__spread","join","sub","Component","selector","template","providers","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","hideDeprecation","className","warnDeprecation","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","clear","wps_1","cfr","ref_1","attachComponentRef","detectChanges","insert","hooks","lifecycle","host","[style.display]","[class]","read","ViewContainerRef","static","FormlyAttributes","renderer","elementRef","_document","uiAttributesCache","uiAttributes","document","templateOptions","attr","setAttribute","to","attributes","removeAttribute","attachAttrElement","fieldAttrElements","element","focusElement","detachAttrElement","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","findIndex","splice","Directive","(focus)","(blur)","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","Inject","DOCUMENT","FieldType","id","Field","_super","tslib_1.__extends","unregisterControl","FormArray","controls","removeAt","setParent","removeControl","registerControl","disabled","disable","enable","registerOnDisabledChange","FormControl","setControl","FieldArrayType","builder","fieldArray","add","remove","FieldWrapper","FormlyGroup","FormlyValidationMessage","fieldForm","errors","errorPath","asyncValidators","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","Observable","subscription_1","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","sort","toggleFormControl","expressionValue","JSON","stringify","setDisabledState","hideExpressionResult","hidden","filter","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","asyncValidator","VALIDATORS","opt","updateValueAndValidity","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","result","handleResult","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","setValidators","_updateTreeValidity","controlOptions","createControl","updateValidity","_validators","_asyncValidators","enabled","onlySelf","setAsyncValidators","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  field: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  defineHiddenProp(field, `___$${prop}`, field[prop]);\n  setFn({ currentValue: field[prop], firstChange: true });\n\n  Object.defineProperty(field, prop, {\n    configurable: true,\n    get: () => field[`___$${prop}`],\n    set: currentValue => {\n      if (currentValue !== field[`___$${prop}`]) {\n        const previousValue = field[`___$${prop}`];\n        field[`___$${prop}`] = currentValue;\n        setFn({ previousValue, currentValue, firstChange: false });\n      }\n    },\n  });\n}\n","import { Injectable, InjectionToken, ComponentRef, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.createComponent(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  createComponent(\n    field: FormlyFieldConfigCache = {},\n    resolver?: ComponentFactoryResolver,\n    injector?: Injector,\n  ): ComponentRef<FieldType> {\n    if (!field.type) {\n      return;\n    }\n\n    const cf = field._componentFactory;\n    if (cf && field.type === cf.type && (cf.componentRef && cf.componentRef.hostView && !cf.componentRef.hostView.destroyed)) {\n      return field._componentFactory.componentRef;\n    }\n\n    const type = this.getType(field.type);\n    if (!resolver) {\n      resolver = field.parent.options._componentFactoryResolver;\n    }\n    if (!injector) {\n      injector = this.getFieldInjector(field);\n    }\n\n    defineHiddenProp(field, '_componentFactory', {\n      type: field.type,\n      component: type.component,\n      componentRef: resolver\n        ? resolver.resolveComponentFactory(type.component).create(injector)\n        : null,\n    });\n\n    return field._componentFactory.componentRef;\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n\n  private getFieldInjector(field: FormlyFieldConfigCache = {}) {\n    const parent = field.parent;\n    if (parent._componentFactory && parent._componentFactory.componentRef) {\n      return parent._componentFactory.componentRef.injector;\n    }\n\n    return parent.options._injector;\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    this._buildForm({ fieldGroup, model, formControl, options: this._setOptions(options) });\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._componentFactoryResolver) {\n      defineHiddenProp(options, '_componentFactoryResolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n  ).subscribe(() => {\n    this.enableCheckExprDebounce = true;\n    this.checkExpressionChange();\n    this.enableCheckExprDebounce = false;\n  });\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || changes.model) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key.split('.'), event.value);\n    this.modelChange.emit(clone(this.model));\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? this.initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges;\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n\n        this.modelChangeSubs.push(valueChanges.subscribe(value => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if ((control as any)._onChange.length > 1) {\n            control.patchValue(value, { emitEvent: false });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value });\n        }));\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Injector,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n    '[class]': 'field.className? field.className : className',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n  @Input('class') className: string = '';\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.field && defineHiddenProp(this.field, '_componentRefs', []);\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      defineHiddenProp(this.field, '_componentRefs', []);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n      const cfr = f.options && f.options._componentFactoryResolver\n        ? f.options._componentFactoryResolver\n        : this.componentFactoryResolver;\n\n      const ref = containerRef.createComponent<FieldWrapper>(cfr.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty(ref.instance, 'fieldComponent', ({ currentValue, firstChange }) => {\n        if (currentValue) {\n          this.renderField(currentValue as ViewContainerRef, f, wps);\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else {\n      const ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);\n      if (ref) {\n        this.attachComponentRef(ref, f);\n        containerRef.insert(ref.hostView);\n      }\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderField(this.containerRef, this.field, this.field.wrappers);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'onChange($event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements() { return (this.field && this.field['_attrElements']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      ['id', 'name'].forEach(attr => {\n        this.field[attr] && this.setAttribute(attr, this.field[attr]);\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.attachAttrElement();\n      if (this.fieldAttrElements.length === 1) {\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n          if (!element) {\n            return;\n          }\n\n          this.focusElement(element, currentValue);\n        });\n      }\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/material2/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.detachAttrElement();\n  }\n\n  focusElement(element, value: boolean) {\n    if (!element.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(element => this.document.activeElement === element || element.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.focus();\n    } else if (!value && isFocused) {\n      element.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachAttrElement() {\n    if (this.field['_attrElements']) {\n      this.field['_attrElements'].push(this.elementRef.nativeElement);\n    } else {\n      defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);\n    }\n  }\n\n  private detachAttrElement() {\n    const index = this.fieldAttrElements.findIndex(element => element !== this.elementRef.nativeElement);\n    if (index !== -1) {\n      this.field['_attrElements'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty } from '../../utils';\n\nexport function unregisterControl(field: FormlyFieldConfig) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === field.formControl);\n    if (key !== -1) {\n      form.removeAt(key);\n      field.formControl.setParent(null);\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === field.formControl) {\n      form.removeControl(key);\n    }\n    field.formControl.setParent(null);\n  }\n}\n\nexport function registerControl(field: FormlyFieldConfig, control?: any) {\n  control = control || field.formControl;\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (parent.get([key]) !== control) {\n    parent.setControl(key, control);\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignModelValue, getKeyPath } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignModelValue(this.field.parent.model, getKeyPath(this.field), []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i]);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, defineHiddenProp, wrapProperty } from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>)\n            .subscribe(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]));\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    field.options._checkField(field, true);\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    const options = field.options as { _hiddenFieldsForCheck: FormlyFieldConfigCache[] };\n\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n\n    if (!field.parent) {\n      options._hiddenFieldsForCheck\n        .sort(f => f.hide ? -1 : 1)\n        .forEach(f => this.toggleFormControl(f, f.hide));\n\n      options._hiddenFieldsForCheck = [];\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key === 'templateOptions.disabled' && field.key) {\n          this.setDisabledState(field, expressionValue);\n        }\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfig, hide: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.formControl && field.key) {\n      hide === true\n        ? unregisterControl(field)\n        : registerControl(field);\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp, isUndefined, isPromise, wrapProperty } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || !field.key) {\n      return;\n    }\n\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    if (!isUndefined(field['_' + type])) {\n      // Avoid overriding existing validators defined through directive (https://github.com/ngx-formly/ngx-formly/issues/1578)\n      if (field.formControl) {\n        const validator = type === 'validators' ? field.formControl.validator : field.formControl.asyncValidator;\n        if (field['_' + type] !== validator) {\n          field['_' + type] = validator;\n        }\n      }\n\n      return;\n    }\n\n    const validators: ValidatorFn[] = type === 'validators' ? [this.getPredefinedFieldValidation(field)] : [];\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(\n      field,\n      '_' + type,\n      type === 'validators' ? Validators.compose(validators) : Validators.composeAsync(validators as any),\n    );\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        field.formControl.updateValueAndValidity({ emitEvent: false });\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn, validatorName?: string) {\n    return (control: AbstractControl) => {\n      let validatorFn = validator as FieldValidatorFn;\n      if (typeof validator === 'string') {\n        validatorFn = this.formlyConfig.getValidator(validator).validation;\n      }\n      if (isObject(validator)) {\n        validatorFn = (validator as any).expression;\n      }\n\n      const isValid = validatorFn(control, field);\n      if (validatorName) {\n        if (isPromise(isValid)) {\n          return isValid.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, result, { validatorName, validator });\n          });\n        }\n\n        return this.handleResult(field, isValid, { validatorName, validator });\n      }\n\n      return isValid;\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, isValid, { validatorName, validator }) {\n    if (isObject(validator) && field.formControl && validator.errorPath) {\n      const control = field.formControl.get(validator.errorPath);\n      if (control) {\n        const controlErrors = (control.errors || {});\n        if (!isValid) {\n          control.setErrors({ ...controlErrors, [validatorName]: { message: validator.message } });\n        } else {\n          delete controlErrors[validatorName];\n          control.setErrors(Object.keys(controlErrors).length === 0 ? null : controlErrors);\n        }\n      }\n\n      return isValid ? null : { [validatorName]: { errorPath: validator.errorPath } };\n    }\n\n    return isValid ? null : { [validatorName]: true };\n  }\n}\n","import { FormlyExtension } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, FormGroup, FormControl, AbstractControlOptions } from '@angular/forms';\nimport { getKeyPath, getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl } from './utils';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const updateValidity = this.setValidators(field);\n    updateValidity && (field.formControl as any)._updateTreeValidity({ emitEvent: false });\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n    let control: AbstractControl;\n\n    const form = field.parent.formControl as FormGroup;\n    const value = getFieldValue(field);\n    const paths = getKeyPath(field);\n    if (field.formControl instanceof AbstractControl || (form && form.get(paths))) {\n      control = field.formControl || form.get(paths);\n    } else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {\n      const component = field._componentFactory.component;\n      console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n      control = component.createControl(value, field);\n    } else if (field.fieldGroup) {\n      // TODO: move to postPopulate\n      control = new FormGroup({}, controlOptions);\n    } else {\n      control = new FormControl(value, controlOptions);\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key) {\n      const {\n        _validators: validators,\n        _asyncValidators: asyncValidators,\n        formControl: control,\n        templateOptions: { disabled },\n      } = field;\n\n      if (disabled && control.enabled) {\n        control.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (validators !== control.validator) {\n        control.setValidators(validators);\n        updateValidity = true;\n      }\n      if (asyncValidators !== control.asyncValidator) {\n        control.setAsyncValidators(asyncValidators);\n        updateValidity = true;\n      }\n    }\n\n    (field.fieldGroup || []).forEach(f => this.setValidators(f) && (updateValidity = true));\n\n    return updateValidity;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, getFieldValue, reverseDeepMerge, getKeyPath } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.createComponent(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}