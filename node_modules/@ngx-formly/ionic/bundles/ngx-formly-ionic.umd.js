(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/forms'), require('@ionic/angular'), require('@ngx-formly/core/select'), require('@angular/core'), require('@ngx-formly/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/ionic', ['exports', '@angular/common', '@angular/forms', '@ionic/angular', '@ngx-formly/core/select', '@angular/core', '@ngx-formly/core'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].ionic = {}),global.ng.common,global.ng.forms,global.angular,global.select,global.ng.core,global.core$1));
}(this, (function (exports,common,forms,angular,select,core,core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldInput = /** @class */ (function (_super) {
        __extends(FormlyFieldInput, _super);
        function FormlyFieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldInput.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-input',
                        template: "\n    <ion-input *ngIf=\"to.type !== 'number' else numberTmp\" [type]=\"to.type || 'text'\" [formControl]=\"formControl\" [ionFormlyAttributes]=\"field\"></ion-input>\n    <ng-template #numberTmp>\n      <ion-input type=\"number\" [formControl]=\"formControl\" [ionFormlyAttributes]=\"field\"></ion-input>\n    </ng-template>\n  ",
                        styles: [':host { display: inherit; }']
                    }] }
        ];
        return FormlyFieldInput;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldCheckbox = /** @class */ (function (_super) {
        __extends(FormlyFieldCheckbox, _super);
        function FormlyFieldCheckbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-checkbox',
                        template: "\n    <ion-checkbox\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-checkbox>\n  "
                    }] }
        ];
        return FormlyFieldCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldDatetime = /** @class */ (function (_super) {
        __extends(FormlyFieldDatetime, _super);
        function FormlyFieldDatetime() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldDatetime.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-datetime',
                        template: "\n    <ion-datetime\n      [displayFormat]=\"to.displayFormat\"\n      [pickerFormat]=\"to.pickerFormat\"\n      [min]=\"to.min\"\n      [max]=\"to.max\"\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-datetime>\n  "
                    }] }
        ];
        return FormlyFieldDatetime;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldRadio = /** @class */ (function (_super) {
        __extends(FormlyFieldRadio, _super);
        function FormlyFieldRadio() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: { options: [] },
            };
            return _this;
        }
        FormlyFieldRadio.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-radio',
                        template: "\n    <ion-list>\n      <ion-radio-group\n        [formControl]=\"formControl\"\n        [ionFormlyAttributes]=\"field\">\n        <ion-list-header>{{ to.label }}</ion-list-header>\n        <ion-item *ngFor=\"let option of to.options | formlySelectOptions:field | async\">\n          <ion-label>{{ option.label }}</ion-label>\n          <ion-radio [value]=\"option.value\"></ion-radio>\n        </ion-item>\n      </ion-radio-group>\n    </ion-list>\n    <ion-item lines=\"none\" *ngIf=\"showError\">\n      <ion-label>\n        <ion-text color=\"danger\">\n          <p>\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\n          </p>\n        </ion-text>\n      </ion-label>\n    </ion-item>\n  "
                    }] }
        ];
        return FormlyFieldRadio;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldToggle = /** @class */ (function (_super) {
        __extends(FormlyFieldToggle, _super);
        function FormlyFieldToggle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldToggle.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-toggle',
                        template: "\n    <ion-toggle\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n    </ion-toggle>\n  "
                    }] }
        ];
        return FormlyFieldToggle;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldSelect = /** @class */ (function (_super) {
        __extends(FormlyFieldSelect, _super);
        function FormlyFieldSelect() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultOptions = {
                templateOptions: { options: [] },
            };
            return _this;
        }
        FormlyFieldSelect.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-select',
                        template: "\n    <ion-select\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\"\n      [multiple]=\"to.multiple\"\n      [interface]=\"to.interface\">\n      <ion-select-option *ngFor=\"let option of to.options | formlySelectOptions:field | async\" [value]=\"option.value\">\n        {{ option.label }}\n      </ion-select-option>\n    </ion-select>\n  ",
                        styles: [':host { display: inherit; }']
                    }] }
        ];
        return FormlyFieldSelect;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldRange = /** @class */ (function (_super) {
        __extends(FormlyFieldRange, _super);
        function FormlyFieldRange() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldRange.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-range',
                        template: "\n    <ion-range\n      [min]=\"to.min\"\n      [max]=\"to.max\"\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\">\n      <ion-label slot=\"start\">{{ to.min }}</ion-label>\n      <ion-label slot=\"end\">{{ to.max }}</ion-label>\n    </ion-range>\n  ",
                        styles: [':host { display: inherit; }']
                    }] }
        ];
        return FormlyFieldRange;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyFieldTextArea = /** @class */ (function (_super) {
        __extends(FormlyFieldTextArea, _super);
        function FormlyFieldTextArea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldTextArea.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-ion-textarea',
                        template: "\n    <ion-textarea\n      [formControl]=\"formControl\"\n      [ionFormlyAttributes]=\"field\"\n      [cols]=\"to.cols\"\n      [rows]=\"to.rows\">\n    </ion-textarea>\n  ",
                        styles: [':host { display: inherit; }']
                    }] }
        ];
        return FormlyFieldTextArea;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyWrapperFormField = /** @class */ (function (_super) {
        __extends(FormlyWrapperFormField, _super);
        function FormlyWrapperFormField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperFormField.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-ion-form-field',
                        template: "\n    <ion-item [lines]=\"to.itemLines\">\n      <ion-label [position]=\"to.labelPosition\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </ion-label>\n      <ng-template #fieldComponent></ng-template>\n    </ion-item>\n    <ion-item lines=\"none\" *ngIf=\"showError\">\n      <ion-label>\n        <ion-text color=\"danger\">\n          <p>\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\n          </p>\n        </ion-text>\n      </ion-label>\n    </ion-item>\n  "
                    }] }
        ];
        return FormlyWrapperFormField;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FIELD_TYPE_COMPONENTS = [
        // types
        FormlyFieldInput,
        FormlyFieldCheckbox,
        FormlyFieldDatetime,
        FormlyFieldRadio,
        FormlyFieldToggle,
        FormlyFieldSelect,
        FormlyFieldRange,
        FormlyFieldTextArea,
        // wrappers
        FormlyWrapperFormField,
    ];
    /** @type {?} */
    var IONIC_FORMLY_CONFIG = {
        types: [
            {
                name: 'input',
                component: FormlyFieldInput,
                wrappers: ['form-field'],
            },
            {
                name: 'checkbox',
                component: FormlyFieldCheckbox,
                wrappers: ['form-field'],
            },
            {
                name: 'datetime',
                component: FormlyFieldDatetime,
                wrappers: ['form-field'],
            },
            {
                name: 'radio',
                component: FormlyFieldRadio,
                wrappers: [],
            },
            {
                name: 'toggle',
                component: FormlyFieldToggle,
                wrappers: ['form-field'],
            },
            {
                name: 'select',
                component: FormlyFieldSelect,
                wrappers: ['form-field'],
            },
            {
                name: 'range',
                component: FormlyFieldRange,
                wrappers: ['form-field'],
            },
            {
                name: 'textarea',
                component: FormlyFieldTextArea,
                wrappers: ['form-field'],
            },
        ],
        wrappers: [
            { name: 'form-field', component: FormlyWrapperFormField },
        ],
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IonFormlyAttributes = /** @class */ (function (_super) {
        __extends(IonFormlyAttributes, _super);
        function IonFormlyAttributes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} element
         * @param {?} value
         * @return {?}
         */
        IonFormlyAttributes.prototype.focusElement = /**
         * @param {?} element
         * @param {?} value
         * @return {?}
         */
            function (element, value) {
                if (!element.setFocus || !value) {
                    return;
                }
                if (!element.getInputElement()) {
                    setTimeout(( /**
                     * @return {?}
                     */function () { return element.setFocus(); }), 300);
                }
                else {
                    element.setFocus();
                }
            };
        IonFormlyAttributes.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line
                        selector: '[ionFormlyAttributes]',
                        host: {
                            '(keyup)': 'to.keyup && to.keyup(field, $event)',
                            '(keydown)': 'to.keydown && to.keydown(field, $event)',
                            '(click)': 'to.click && to.click(field, $event)',
                            '(keypress)': 'to.keypress && to.keypress(field, $event)',
                            '(ionChange)': 'to.change && to.change(field, $event)',
                            '(ionFocus)': 'onFocus($event)',
                            '(ionBlur)': 'onBlur($event)',
                        },
                    },] }
        ];
        IonFormlyAttributes.propDecorators = {
            field: [{ type: core.Input, args: ['ionFormlyAttributes',] }]
        };
        return IonFormlyAttributes;
    }(core$1.FormlyAttributes));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormlyIonicModule = /** @class */ (function () {
        function FormlyIonicModule() {
        }
        FormlyIonicModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FIELD_TYPE_COMPONENTS, IonFormlyAttributes],
                        imports: [
                            common.CommonModule,
                            angular.IonicModule,
                            forms.ReactiveFormsModule,
                            select.FormlySelectModule,
                            core$1.FormlyModule.forChild(IONIC_FORMLY_CONFIG),
                        ],
                        exports: [IonFormlyAttributes],
                    },] }
        ];
        return FormlyIonicModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormlyIonicModule = FormlyIonicModule;
    exports.FormlyFieldInput = FormlyFieldInput;
    exports.FormlyFieldCheckbox = FormlyFieldCheckbox;
    exports.FormlyFieldDatetime = FormlyFieldDatetime;
    exports.FormlyFieldRadio = FormlyFieldRadio;
    exports.FormlyFieldToggle = FormlyFieldToggle;
    exports.FormlyFieldSelect = FormlyFieldSelect;
    exports.FormlyFieldRange = FormlyFieldRange;
    exports.FormlyFieldTextArea = FormlyFieldTextArea;
    exports.FormlyWrapperFormField = FormlyWrapperFormField;
    exports.ɵc = IonFormlyAttributes;
    exports.ɵa = FIELD_TYPE_COMPONENTS;
    exports.ɵb = IONIC_FORMLY_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-formly-ionic.umd.js.map