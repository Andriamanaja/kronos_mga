/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldDatetime, FormlyFieldRadio, FormlyFieldToggle, FormlyFieldSelect, FormlyFieldRange, FormlyFieldTextArea, } from './types/types';
import { FormlyWrapperFormField } from './wrappers/wrappers';
/** @type {?} */
export var FIELD_TYPE_COMPONENTS = [
    // types
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldDatetime,
    FormlyFieldRadio,
    FormlyFieldToggle,
    FormlyFieldSelect,
    FormlyFieldRange,
    FormlyFieldTextArea,
    // wrappers
    FormlyWrapperFormField,
];
/** @type {?} */
export var IONIC_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['form-field'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['form-field'],
        },
        {
            name: 'datetime',
            component: FormlyFieldDatetime,
            wrappers: ['form-field'],
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: [],
        },
        {
            name: 'toggle',
            component: FormlyFieldToggle,
            wrappers: ['form-field'],
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['form-field'],
        },
        {
            name: 'range',
            component: FormlyFieldRange,
            wrappers: ['form-field'],
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['form-field'],
        },
    ],
    wrappers: [
        { name: 'form-field', component: FormlyWrapperFormField },
    ],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktaW9uaWMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvaW9uaWMvIiwic291cmNlcyI6WyJsaWIvdWktaW9uaWMuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixHQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFHN0QsTUFBTSxLQUFPLHFCQUFxQixHQUFHO0lBQ25DLFFBQVE7SUFDUixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBRW5CLFdBQVc7SUFDWCxzQkFBc0I7Q0FDdkI7O0FBRUQsTUFBTSxLQUFPLG1CQUFtQixHQUFpQjtJQUMvQyxLQUFLLEVBQUU7UUFDTDtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7U0FDekI7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFNBQVMsRUFBRSxtQkFBbUI7WUFDOUIsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQ3pCO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsVUFBVTtZQUNoQixTQUFTLEVBQUUsbUJBQW1CO1lBQzlCLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQztTQUN6QjtRQUNEO1lBQ0UsSUFBSSxFQUFFLE9BQU87WUFDYixTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLFFBQVEsRUFBRSxFQUFFO1NBQ2I7UUFDRDtZQUNFLElBQUksRUFBRSxRQUFRO1lBQ2QsU0FBUyxFQUFFLGlCQUFpQjtZQUM1QixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7U0FDekI7UUFDRDtZQUNFLElBQUksRUFBRSxRQUFRO1lBQ2QsU0FBUyxFQUFFLGlCQUFpQjtZQUM1QixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7U0FDekI7UUFDRDtZQUNFLElBQUksRUFBRSxPQUFPO1lBQ2IsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUM7U0FDekI7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFNBQVMsRUFBRSxtQkFBbUI7WUFDOUIsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQ3pCO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLHNCQUFzQixFQUFFO0tBQzFEO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWdPcHRpb24gfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7XG4gIEZvcm1seUZpZWxkSW5wdXQsXG4gIEZvcm1seUZpZWxkQ2hlY2tib3gsXG4gIEZvcm1seUZpZWxkRGF0ZXRpbWUsXG4gIEZvcm1seUZpZWxkUmFkaW8sXG4gIEZvcm1seUZpZWxkVG9nZ2xlLFxuICBGb3JtbHlGaWVsZFNlbGVjdCxcbiAgRm9ybWx5RmllbGRSYW5nZSxcbiAgRm9ybWx5RmllbGRUZXh0QXJlYSxcbn0gZnJvbSAnLi90eXBlcy90eXBlcyc7XG5pbXBvcnQgeyBGb3JtbHlXcmFwcGVyRm9ybUZpZWxkIH0gZnJvbSAnLi93cmFwcGVycy93cmFwcGVycyc7XG5cblxuZXhwb3J0IGNvbnN0IEZJRUxEX1RZUEVfQ09NUE9ORU5UUyA9IFtcbiAgLy8gdHlwZXNcbiAgRm9ybWx5RmllbGRJbnB1dCxcbiAgRm9ybWx5RmllbGRDaGVja2JveCxcbiAgRm9ybWx5RmllbGREYXRldGltZSxcbiAgRm9ybWx5RmllbGRSYWRpbyxcbiAgRm9ybWx5RmllbGRUb2dnbGUsXG4gIEZvcm1seUZpZWxkU2VsZWN0LFxuICBGb3JtbHlGaWVsZFJhbmdlLFxuICBGb3JtbHlGaWVsZFRleHRBcmVhLFxuXG4gIC8vIHdyYXBwZXJzXG4gIEZvcm1seVdyYXBwZXJGb3JtRmllbGQsXG5dO1xuXG5leHBvcnQgY29uc3QgSU9OSUNfRk9STUxZX0NPTkZJRzogQ29uZmlnT3B0aW9uID0ge1xuICB0eXBlczogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdpbnB1dCcsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkSW5wdXQsXG4gICAgICB3cmFwcGVyczogWydmb3JtLWZpZWxkJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnY2hlY2tib3gnLFxuICAgICAgY29tcG9uZW50OiBGb3JtbHlGaWVsZENoZWNrYm94LFxuICAgICAgd3JhcHBlcnM6IFsnZm9ybS1maWVsZCddLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2RhdGV0aW1lJyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGREYXRldGltZSxcbiAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdyYWRpbycsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkUmFkaW8sXG4gICAgICB3cmFwcGVyczogW10sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAndG9nZ2xlJyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRUb2dnbGUsXG4gICAgICB3cmFwcGVyczogWydmb3JtLWZpZWxkJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRTZWxlY3QsXG4gICAgICB3cmFwcGVyczogWydmb3JtLWZpZWxkJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAncmFuZ2UnLFxuICAgICAgY29tcG9uZW50OiBGb3JtbHlGaWVsZFJhbmdlLFxuICAgICAgd3JhcHBlcnM6IFsnZm9ybS1maWVsZCddLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3RleHRhcmVhJyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRUZXh0QXJlYSxcbiAgICAgIHdyYXBwZXJzOiBbJ2Zvcm0tZmllbGQnXSxcbiAgICB9LFxuICBdLFxuICB3cmFwcGVyczogW1xuICAgIHsgbmFtZTogJ2Zvcm0tZmllbGQnLCBjb21wb25lbnQ6IEZvcm1seVdyYXBwZXJGb3JtRmllbGQgfSxcbiAgXSxcbn07XG4iXX0=