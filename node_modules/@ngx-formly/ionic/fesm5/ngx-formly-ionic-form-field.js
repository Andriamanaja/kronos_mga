import { Component, Directive, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FieldWrapper, FormlyAttributes, FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { IonicModule } from '@ionic/angular';
import { __extends } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyWrapperFormField = /** @class */ (function (_super) {
    __extends(FormlyWrapperFormField, _super);
    function FormlyWrapperFormField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyWrapperFormField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-wrapper-ion-form-field',
                    template: "\n    <ion-item [lines]=\"to.itemLines\">\n      <ion-label [position]=\"to.labelPosition\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </ion-label>\n      <ng-template #fieldComponent></ng-template>\n    </ion-item>\n    <ion-item lines=\"none\" *ngIf=\"showError\">\n      <ion-label>\n        <ion-text color=\"danger\">\n          <p>\n            <formly-validation-message [field]=\"field\"></formly-validation-message>\n          </p>\n        </ion-text>\n      </ion-label>\n    </ion-item>\n  "
                }] }
    ];
    return FormlyWrapperFormField;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IonFormlyAttributes = /** @class */ (function (_super) {
    __extends(IonFormlyAttributes, _super);
    function IonFormlyAttributes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    IonFormlyAttributes.prototype.focusElement = /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    function (element, value) {
        if (!element.setFocus || !value) {
            return;
        }
        if (!element.getInputElement()) {
            setTimeout((/**
             * @return {?}
             */
            function () { return element.setFocus(); }), 300);
        }
        else {
            element.setFocus();
        }
    };
    IonFormlyAttributes.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line
                    selector: '[ionFormlyAttributes]',
                    host: {
                        '(keyup)': 'to.keyup && to.keyup(field, $event)',
                        '(keydown)': 'to.keydown && to.keydown(field, $event)',
                        '(click)': 'to.click && to.click(field, $event)',
                        '(keypress)': 'to.keypress && to.keypress(field, $event)',
                        '(ionChange)': 'to.change && to.change(field, $event)',
                        '(ionFocus)': 'onFocus($event)',
                        '(ionBlur)': 'onBlur($event)',
                    },
                },] }
    ];
    IonFormlyAttributes.propDecorators = {
        field: [{ type: Input, args: ['ionFormlyAttributes',] }]
    };
    return IonFormlyAttributes;
}(FormlyAttributes));
if (false) {
    /** @type {?} */
    IonFormlyAttributes.prototype.field;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFormFieldModule = /** @class */ (function () {
    function FormlyFormFieldModule() {
    }
    FormlyFormFieldModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FormlyWrapperFormField, IonFormlyAttributes],
                    exports: [IonFormlyAttributes],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        IonicModule,
                        FormlyModule.forChild({
                            wrappers: [
                                {
                                    name: 'form-field',
                                    component: FormlyWrapperFormField,
                                },
                            ],
                        }),
                    ],
                },] }
    ];
    return FormlyFormFieldModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyFormFieldModule, FormlyWrapperFormField as ɵa, IonFormlyAttributes as ɵb };
//# sourceMappingURL=ngx-formly-ionic-form-field.js.map
