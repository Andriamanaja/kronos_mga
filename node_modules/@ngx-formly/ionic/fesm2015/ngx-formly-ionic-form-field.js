import { Component, Directive, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FieldWrapper, FormlyAttributes, FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { IonicModule } from '@ionic/angular';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyWrapperFormField extends FieldWrapper {
}
FormlyWrapperFormField.decorators = [
    { type: Component, args: [{
                selector: 'formly-wrapper-ion-form-field',
                template: `
    <ion-item [lines]="to.itemLines">
      <ion-label [position]="to.labelPosition">
        {{ to.label }}
        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>
      </ion-label>
      <ng-template #fieldComponent></ng-template>
    </ion-item>
    <ion-item lines="none" *ngIf="showError">
      <ion-label>
        <ion-text color="danger">
          <p>
            <formly-validation-message [field]="field"></formly-validation-message>
          </p>
        </ion-text>
      </ion-label>
    </ion-item>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IonFormlyAttributes extends FormlyAttributes {
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    focusElement(element, value) {
        if (!element.setFocus || !value) {
            return;
        }
        if (!element.getInputElement()) {
            setTimeout((/**
             * @return {?}
             */
            () => element.setFocus()), 300);
        }
        else {
            element.setFocus();
        }
    }
}
IonFormlyAttributes.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line
                selector: '[ionFormlyAttributes]',
                host: {
                    '(keyup)': 'to.keyup && to.keyup(field, $event)',
                    '(keydown)': 'to.keydown && to.keydown(field, $event)',
                    '(click)': 'to.click && to.click(field, $event)',
                    '(keypress)': 'to.keypress && to.keypress(field, $event)',
                    '(ionChange)': 'to.change && to.change(field, $event)',
                    '(ionFocus)': 'onFocus($event)',
                    '(ionBlur)': 'onBlur($event)',
                },
            },] }
];
IonFormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['ionFormlyAttributes',] }]
};
if (false) {
    /** @type {?} */
    IonFormlyAttributes.prototype.field;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormlyFormFieldModule {
}
FormlyFormFieldModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormlyWrapperFormField, IonFormlyAttributes],
                exports: [IonFormlyAttributes],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    IonicModule,
                    FormlyModule.forChild({
                        wrappers: [
                            {
                                name: 'form-field',
                                component: FormlyWrapperFormField,
                            },
                        ],
                    }),
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormlyFormFieldModule, FormlyWrapperFormField as ɵa, IonFormlyAttributes as ɵb };
//# sourceMappingURL=ngx-formly-ionic-form-field.js.map
