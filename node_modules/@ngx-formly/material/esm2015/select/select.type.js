/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { FieldType } from '@ngx-formly/material/form-field';
export class FormlyFieldSelect extends FieldType {
    constructor() {
        super(...arguments);
        this.defaultOptions = {
            templateOptions: { options: [] },
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getSelectAllState(options) {
        if (this.empty || this.value.length === 0) {
            return '';
        }
        return this.value.length !== this.getSelectAllValue(options).length
            ? 'indeterminate'
            : 'checked';
    }
    /**
     * @param {?} options
     * @return {?}
     */
    toggleSelectAll(options) {
        /** @type {?} */
        const selectAllValue = this.getSelectAllValue(options);
        this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length
            ? selectAllValue
            : []);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    change($event) {
        if (this.to.change) {
            this.to.change(this.field, $event);
        }
    }
    /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    compareWith(o1, o2) {
        return o1 === o2;
    }
    /**
     * @return {?}
     */
    _getAriaLabelledby() {
        if (this.to.attributes && this.to.attributes['aria-labelledby']) {
            return this.to.attributes['aria-labelledby'];
        }
        if (this.formField && this.formField._labelId) {
            return this.formField._labelId;
        }
        return null;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    getSelectAllValue(options) {
        if (!this.selectAllValue || options !== this.selectAllValue.options) {
            /** @type {?} */
            const flatOptions = [];
            options.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => o.group
                ? flatOptions.push(...o.group)
                : flatOptions.push(o)));
            this.selectAllValue = {
                options,
                value: flatOptions.map((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.value)),
            };
        }
        return this.selectAllValue.value;
    }
}
FormlyFieldSelect.decorators = [
    { type: Component, args: [{
                selector: 'formly-field-mat-select',
                template: `
    <ng-template #selectAll let-selectOptions="selectOptions">
      <mat-option (click)="toggleSelectAll(selectOptions)">
        <mat-pseudo-checkbox class="mat-option-pseudo-checkbox"
          [state]="getSelectAllState(selectOptions)">
        </mat-pseudo-checkbox>
        {{ to.selectAllOption }}
      </mat-option>
    </ng-template>

    <mat-select [id]="id"
      [formControl]="formControl"
      [formlyAttributes]="field"
      [placeholder]="to.placeholder"
      [tabindex]="to.tabindex || 0"
      [compareWith]="to.compareWith || compareWith"
      [multiple]="to.multiple"
      (selectionChange)="change($event)"
      [errorStateMatcher]="errorStateMatcher"
      [aria-labelledby]="_getAriaLabelledby()"
      [disableOptionCentering]="to.disableOptionCentering"
      >
      <ng-container *ngIf="to.options | formlySelectOptions:field | async as selectOptions">
        <ng-container *ngIf="to.multiple && to.selectAllOption" [ngTemplateOutlet]="selectAll" [ngTemplateOutletContext]="{ selectOptions: selectOptions }">
        </ng-container>
        <ng-container *ngFor="let item of selectOptions">
          <mat-optgroup *ngIf="item.group" [label]="item.label">
            <mat-option *ngFor="let child of item.group" [value]="child.value" [disabled]="child.disabled">
              {{ child.label }}
            </mat-option>
          </mat-optgroup>
          <mat-option *ngIf="!item.group" [value]="item.value" [disabled]="item.disabled">{{ item.label }}</mat-option>
        </ng-container>
      </ng-container>
    </mat-select>
  `
            }] }
];
FormlyFieldSelect.propDecorators = {
    formFieldControl: [{ type: ViewChild, args: [MatSelect, (/** @type {?} */ ({ static: true })),] }]
};
if (false) {
    /** @type {?} */
    FormlyFieldSelect.prototype.formFieldControl;
    /** @type {?} */
    FormlyFieldSelect.prototype.defaultOptions;
    /**
     * @type {?}
     * @private
     */
    FormlyFieldSelect.prototype.selectAllValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LnR5cGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9tYXRlcmlhbC9zZWxlY3QvIiwic291cmNlcyI6WyJzZWxlY3QudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBbUIsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUF5QzVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBdkNoRDs7UUEwQ0UsbUJBQWMsR0FBRztZQUNmLGVBQWUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7U0FDakMsQ0FBQztJQStESixDQUFDOzs7OztJQTNEQyxpQkFBaUIsQ0FBQyxPQUFjO1FBQzlCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekMsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUdELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU07WUFDakUsQ0FBQyxDQUFDLGVBQWU7WUFDakIsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxPQUFjOztjQUN0QixjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDdkIsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLGNBQWMsQ0FBQyxNQUFNO1lBQ3hELENBQUMsQ0FBQyxjQUFjO1lBQ2hCLENBQUMsQ0FBQyxFQUFFLENBQ1AsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQXVCO1FBQzVCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxFQUFPLEVBQUUsRUFBTztRQUMxQixPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDL0QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQzdDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDaEM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7OztJQUVPLGlCQUFpQixDQUFDLE9BQWM7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFOztrQkFDN0QsV0FBVyxHQUFVLEVBQUU7WUFDN0IsT0FBTyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUMxQixDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN0QixDQUFDO1lBRUYsSUFBSSxDQUFDLGNBQWMsR0FBRztnQkFDcEIsT0FBTztnQkFDUCxLQUFLLEVBQUUsV0FBVyxDQUFDLEdBQUc7Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFDO2FBQ3JDLENBQUM7U0FDSDtRQUdELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDbkMsQ0FBQzs7O1lBMUdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUNUO2FBQ0Y7OzsrQkFFRSxTQUFTLFNBQUMsU0FBUyxFQUFFLG1CQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFBOzs7O0lBQTVDLDZDQUEyRTs7SUFFM0UsMkNBRUU7Ozs7O0lBRUYsMkNBQXdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFNlbGVjdCwgTWF0U2VsZWN0Q2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc2VsZWN0JztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQtbWF0LXNlbGVjdCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLXRlbXBsYXRlICNzZWxlY3RBbGwgbGV0LXNlbGVjdE9wdGlvbnM9XCJzZWxlY3RPcHRpb25zXCI+XG4gICAgICA8bWF0LW9wdGlvbiAoY2xpY2spPVwidG9nZ2xlU2VsZWN0QWxsKHNlbGVjdE9wdGlvbnMpXCI+XG4gICAgICAgIDxtYXQtcHNldWRvLWNoZWNrYm94IGNsYXNzPVwibWF0LW9wdGlvbi1wc2V1ZG8tY2hlY2tib3hcIlxuICAgICAgICAgIFtzdGF0ZV09XCJnZXRTZWxlY3RBbGxTdGF0ZShzZWxlY3RPcHRpb25zKVwiPlxuICAgICAgICA8L21hdC1wc2V1ZG8tY2hlY2tib3g+XG4gICAgICAgIHt7IHRvLnNlbGVjdEFsbE9wdGlvbiB9fVxuICAgICAgPC9tYXQtb3B0aW9uPlxuICAgIDwvbmctdGVtcGxhdGU+XG5cbiAgICA8bWF0LXNlbGVjdCBbaWRdPVwiaWRcIlxuICAgICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCJcbiAgICAgIFtwbGFjZWhvbGRlcl09XCJ0by5wbGFjZWhvbGRlclwiXG4gICAgICBbdGFiaW5kZXhdPVwidG8udGFiaW5kZXggfHwgMFwiXG4gICAgICBbY29tcGFyZVdpdGhdPVwidG8uY29tcGFyZVdpdGggfHwgY29tcGFyZVdpdGhcIlxuICAgICAgW211bHRpcGxlXT1cInRvLm11bHRpcGxlXCJcbiAgICAgIChzZWxlY3Rpb25DaGFuZ2UpPVwiY2hhbmdlKCRldmVudClcIlxuICAgICAgW2Vycm9yU3RhdGVNYXRjaGVyXT1cImVycm9yU3RhdGVNYXRjaGVyXCJcbiAgICAgIFthcmlhLWxhYmVsbGVkYnldPVwiX2dldEFyaWFMYWJlbGxlZGJ5KClcIlxuICAgICAgW2Rpc2FibGVPcHRpb25DZW50ZXJpbmddPVwidG8uZGlzYWJsZU9wdGlvbkNlbnRlcmluZ1wiXG4gICAgICA+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidG8ub3B0aW9ucyB8IGZvcm1seVNlbGVjdE9wdGlvbnM6ZmllbGQgfCBhc3luYyBhcyBzZWxlY3RPcHRpb25zXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0by5tdWx0aXBsZSAmJiB0by5zZWxlY3RBbGxPcHRpb25cIiBbbmdUZW1wbGF0ZU91dGxldF09XCJzZWxlY3RBbGxcIiBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwieyBzZWxlY3RPcHRpb25zOiBzZWxlY3RPcHRpb25zIH1cIj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc2VsZWN0T3B0aW9uc1wiPlxuICAgICAgICAgIDxtYXQtb3B0Z3JvdXAgKm5nSWY9XCJpdGVtLmdyb3VwXCIgW2xhYmVsXT1cIml0ZW0ubGFiZWxcIj5cbiAgICAgICAgICAgIDxtYXQtb3B0aW9uICpuZ0Zvcj1cImxldCBjaGlsZCBvZiBpdGVtLmdyb3VwXCIgW3ZhbHVlXT1cImNoaWxkLnZhbHVlXCIgW2Rpc2FibGVkXT1cImNoaWxkLmRpc2FibGVkXCI+XG4gICAgICAgICAgICAgIHt7IGNoaWxkLmxhYmVsIH19XG4gICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgPC9tYXQtb3B0Z3JvdXA+XG4gICAgICAgICAgPG1hdC1vcHRpb24gKm5nSWY9XCIhaXRlbS5ncm91cFwiIFt2YWx1ZV09XCJpdGVtLnZhbHVlXCIgW2Rpc2FibGVkXT1cIml0ZW0uZGlzYWJsZWRcIj57eyBpdGVtLmxhYmVsIH19PC9tYXQtb3B0aW9uPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbWF0LXNlbGVjdD5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5RmllbGRTZWxlY3QgZXh0ZW5kcyBGaWVsZFR5cGUge1xuICBAVmlld0NoaWxkKE1hdFNlbGVjdCwgPGFueT4geyBzdGF0aWM6IHRydWUgfSkgZm9ybUZpZWxkQ29udHJvbCE6IE1hdFNlbGVjdDtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHsgb3B0aW9uczogW10gfSxcbiAgfTtcblxuICBwcml2YXRlIHNlbGVjdEFsbFZhbHVlITogeyBvcHRpb25zOiBhbnksIHZhbHVlOiBhbnlbXSB9O1xuXG4gIGdldFNlbGVjdEFsbFN0YXRlKG9wdGlvbnM6IGFueVtdKSB7XG4gICAgaWYgKHRoaXMuZW1wdHkgfHwgdGhpcy52YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cblxuICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aCAhPT0gdGhpcy5nZXRTZWxlY3RBbGxWYWx1ZShvcHRpb25zKS5sZW5ndGhcbiAgICAgID8gJ2luZGV0ZXJtaW5hdGUnXG4gICAgICA6ICdjaGVja2VkJztcbiAgfVxuXG4gIHRvZ2dsZVNlbGVjdEFsbChvcHRpb25zOiBhbnlbXSkge1xuICAgIGNvbnN0IHNlbGVjdEFsbFZhbHVlID0gdGhpcy5nZXRTZWxlY3RBbGxWYWx1ZShvcHRpb25zKTtcbiAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbHVlKFxuICAgICAgIXRoaXMudmFsdWUgfHwgdGhpcy52YWx1ZS5sZW5ndGggIT09IHNlbGVjdEFsbFZhbHVlLmxlbmd0aFxuICAgICAgICA/IHNlbGVjdEFsbFZhbHVlXG4gICAgICAgIDogW10sXG4gICAgKTtcbiAgfVxuXG4gIGNoYW5nZSgkZXZlbnQ6IE1hdFNlbGVjdENoYW5nZSkge1xuICAgIGlmICh0aGlzLnRvLmNoYW5nZSkge1xuICAgICAgdGhpcy50by5jaGFuZ2UodGhpcy5maWVsZCwgJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBjb21wYXJlV2l0aChvMTogYW55LCBvMjogYW55KSB7XG4gICAgcmV0dXJuIG8xID09PSBvMjtcbiAgfVxuXG4gIF9nZXRBcmlhTGFiZWxsZWRieSgpIHtcbiAgICBpZiAodGhpcy50by5hdHRyaWJ1dGVzICYmIHRoaXMudG8uYXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10pIHtcbiAgICAgIHJldHVybiB0aGlzLnRvLmF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcm1GaWVsZCAmJiB0aGlzLmZvcm1GaWVsZC5fbGFiZWxJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybUZpZWxkLl9sYWJlbElkO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZWxlY3RBbGxWYWx1ZShvcHRpb25zOiBhbnlbXSkge1xuICAgIGlmICghdGhpcy5zZWxlY3RBbGxWYWx1ZSB8fCBvcHRpb25zICE9PSB0aGlzLnNlbGVjdEFsbFZhbHVlLm9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZsYXRPcHRpb25zOiBhbnlbXSA9IFtdO1xuICAgICAgb3B0aW9ucy5mb3JFYWNoKG8gPT4gby5ncm91cFxuICAgICAgICA/IGZsYXRPcHRpb25zLnB1c2goLi4uby5ncm91cClcbiAgICAgICAgOiBmbGF0T3B0aW9ucy5wdXNoKG8pLFxuICAgICAgKTtcblxuICAgICAgdGhpcy5zZWxlY3RBbGxWYWx1ZSA9IHtcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgdmFsdWU6IGZsYXRPcHRpb25zLm1hcChvID0+IG8udmFsdWUpLFxuICAgICAgfTtcbiAgICB9XG5cblxuICAgIHJldHVybiB0aGlzLnNlbGVjdEFsbFZhbHVlLnZhbHVlO1xuICB9XG59XG4iXX0=