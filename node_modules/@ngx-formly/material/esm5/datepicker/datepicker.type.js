/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef } from '@angular/core';
import { ÉµdefineHiddenProp as defineHiddenProp } from '@ngx-formly/core';
import { FieldType } from '@ngx-formly/material/form-field';
import { MatInput } from '@angular/material/input';
import { MatDatepickerInput } from '@angular/material/datepicker';
var FormlyDatepickerTypeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyDatepickerTypeComponent, _super);
    function FormlyDatepickerTypeComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                datepickerOptions: {
                    startView: 'month',
                    datepickerTogglePosition: 'suffix',
                },
            },
        };
        return _this;
    }
    /**
     * @return {?}
     */
    FormlyDatepickerTypeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        // temporary fix for https://github.com/angular/material2/issues/6728
        ((/** @type {?} */ (this.datepickerInput)))._formField = this.formField;
        setTimeout((/**
         * @return {?}
         */
        function () {
            defineHiddenProp(_this.field, '_mat' + _this.to.datepickerOptions.datepickerTogglePosition, _this.datepickerToggle);
            ((/** @type {?} */ (_this.options)))._markForCheck(_this.field);
        }));
    };
    FormlyDatepickerTypeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-mat-datepicker',
                    template: "\n    <input matInput\n      [id]=\"id\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [matDatepicker]=\"picker\"\n      [matDatepickerFilter]=\"to.datepickerOptions.filter\"\n      [max]=\"to.datepickerOptions.max\"\n      [min]=\"to.datepickerOptions.min\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex || 0\"\n      [readonly]=\"to.readonly\">\n    <ng-template #datepickerToggle>\n      <mat-datepicker-toggle [for]=\"picker\"></mat-datepicker-toggle>\n    </ng-template>\n    <mat-datepicker #picker\n      [color]=\"to.color\"\n      [touchUi]=\"to.datepickerOptions.touchUi\"\n      [startView]=\"to.datepickerOptions.startView\"\n      [startAt]=\"to.datepickerOptions.startAt\">\n    </mat-datepicker>\n  "
                }] }
    ];
    FormlyDatepickerTypeComponent.propDecorators = {
        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }],
        datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput,] }],
        datepickerToggle: [{ type: ViewChild, args: ['datepickerToggle',] }]
    };
    return FormlyDatepickerTypeComponent;
}(FieldType));
export { FormlyDatepickerTypeComponent };
if (false) {
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.formFieldControl;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerInput;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.datepickerToggle;
    /** @type {?} */
    FormlyDatepickerTypeComponent.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci50eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvbWF0ZXJpYWwvZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImRhdGVwaWNrZXIudHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFpQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakYsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRTtJQTBCbUQseURBQVM7SUExQjVEO1FBQUEscUVBa0RDO1FBbkJDLG9CQUFjLEdBQUc7WUFDZixlQUFlLEVBQUU7Z0JBQ2YsaUJBQWlCLEVBQUU7b0JBQ2pCLFNBQVMsRUFBRSxPQUFPO29CQUNsQix3QkFBd0IsRUFBRSxRQUFRO2lCQUNuQzthQUNGO1NBQ0YsQ0FBQzs7SUFZSixDQUFDOzs7O0lBVkMsdURBQWU7OztJQUFmO1FBQUEsaUJBU0M7UUFSQyxpQkFBTSxlQUFlLFdBQUUsQ0FBQztRQUN4QixxRUFBcUU7UUFDckUsQ0FBQyxtQkFBTSxJQUFJLENBQUMsZUFBZSxFQUFBLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUV6RCxVQUFVOzs7UUFBQztZQUNULGdCQUFnQixDQUFDLEtBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsd0JBQXdCLEVBQUUsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDakgsQ0FBQyxtQkFBTSxLQUFJLENBQUMsT0FBTyxFQUFBLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBakRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QyxRQUFRLEVBQUUseXpCQXNCVDtpQkFDRjs7O21DQUVFLFNBQVMsU0FBQyxRQUFRLEVBQUUsbUJBQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUE7a0NBQzFDLFNBQVMsU0FBQyxrQkFBa0I7bUNBQzVCLFNBQVMsU0FBQyxrQkFBa0I7O0lBcUIvQixvQ0FBQztDQUFBLEFBbERELENBMEJtRCxTQUFTLEdBd0IzRDtTQXhCWSw2QkFBNkI7OztJQUN4Qyx5REFBeUU7O0lBQ3pFLHdEQUF5RTs7SUFDekUseURBQW1FOztJQUVuRSx1REFPRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgybVkZWZpbmVIaWRkZW5Qcm9wIGFzIGRlZmluZUhpZGRlblByb3AgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgTWF0SW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQgeyBNYXREYXRlcGlja2VySW5wdXQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kYXRlcGlja2VyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLW1hdC1kYXRlcGlja2VyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8aW5wdXQgbWF0SW5wdXRcbiAgICAgIFtpZF09XCJpZFwiXG4gICAgICBbZXJyb3JTdGF0ZU1hdGNoZXJdPVwiZXJyb3JTdGF0ZU1hdGNoZXJcIlxuICAgICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICAgIFttYXREYXRlcGlja2VyXT1cInBpY2tlclwiXG4gICAgICBbbWF0RGF0ZXBpY2tlckZpbHRlcl09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5maWx0ZXJcIlxuICAgICAgW21heF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5tYXhcIlxuICAgICAgW21pbl09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5taW5cIlxuICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIlxuICAgICAgW3BsYWNlaG9sZGVyXT1cInRvLnBsYWNlaG9sZGVyXCJcbiAgICAgIFt0YWJpbmRleF09XCJ0by50YWJpbmRleCB8fCAwXCJcbiAgICAgIFtyZWFkb25seV09XCJ0by5yZWFkb25seVwiPlxuICAgIDxuZy10ZW1wbGF0ZSAjZGF0ZXBpY2tlclRvZ2dsZT5cbiAgICAgIDxtYXQtZGF0ZXBpY2tlci10b2dnbGUgW2Zvcl09XCJwaWNrZXJcIj48L21hdC1kYXRlcGlja2VyLXRvZ2dsZT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICAgIDxtYXQtZGF0ZXBpY2tlciAjcGlja2VyXG4gICAgICBbY29sb3JdPVwidG8uY29sb3JcIlxuICAgICAgW3RvdWNoVWldPVwidG8uZGF0ZXBpY2tlck9wdGlvbnMudG91Y2hVaVwiXG4gICAgICBbc3RhcnRWaWV3XT1cInRvLmRhdGVwaWNrZXJPcHRpb25zLnN0YXJ0Vmlld1wiXG4gICAgICBbc3RhcnRBdF09XCJ0by5kYXRlcGlja2VyT3B0aW9ucy5zdGFydEF0XCI+XG4gICAgPC9tYXQtZGF0ZXBpY2tlcj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5RGF0ZXBpY2tlclR5cGVDb21wb25lbnQgZXh0ZW5kcyBGaWVsZFR5cGUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQFZpZXdDaGlsZChNYXRJbnB1dCwgPGFueT4geyBzdGF0aWM6IHRydWUgfSkgZm9ybUZpZWxkQ29udHJvbCE6IE1hdElucHV0O1xuICBAVmlld0NoaWxkKE1hdERhdGVwaWNrZXJJbnB1dCkgZGF0ZXBpY2tlcklucHV0ITogTWF0RGF0ZXBpY2tlcklucHV0PGFueT47XG4gIEBWaWV3Q2hpbGQoJ2RhdGVwaWNrZXJUb2dnbGUnKSBkYXRlcGlja2VyVG9nZ2xlITogVGVtcGxhdGVSZWY8YW55PjtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgIGRhdGVwaWNrZXJPcHRpb25zOiB7XG4gICAgICAgIHN0YXJ0VmlldzogJ21vbnRoJyxcbiAgICAgICAgZGF0ZXBpY2tlclRvZ2dsZVBvc2l0aW9uOiAnc3VmZml4JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XG4gICAgLy8gdGVtcG9yYXJ5IGZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWwyL2lzc3Vlcy82NzI4XG4gICAgKDxhbnk+IHRoaXMuZGF0ZXBpY2tlcklucHV0KS5fZm9ybUZpZWxkID0gdGhpcy5mb3JtRmllbGQ7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRlZmluZUhpZGRlblByb3AodGhpcy5maWVsZCwgJ19tYXQnICsgdGhpcy50by5kYXRlcGlja2VyT3B0aW9ucy5kYXRlcGlja2VyVG9nZ2xlUG9zaXRpb24sIHRoaXMuZGF0ZXBpY2tlclRvZ2dsZSk7XG4gICAgICAoPGFueT4gdGhpcy5vcHRpb25zKS5fbWFya0ZvckNoZWNrKHRoaXMuZmllbGQpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=