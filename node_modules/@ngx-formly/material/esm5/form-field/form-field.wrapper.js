/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, Renderer2, ElementRef, ViewContainerRef } from '@angular/core';
import { FieldWrapper, ÉµdefineHiddenProp as defineHiddenProp } from '@ngx-formly/core';
import { MatFormField } from '@angular/material/form-field';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import { FocusMonitor } from '@angular/cdk/a11y';
import { FieldType } from './field.type';
/**
 * @record
 */
function MatFormlyFieldConfig() { }
if (false) {
    /** @type {?} */
    MatFormlyFieldConfig.prototype._matprefix;
    /** @type {?} */
    MatFormlyFieldConfig.prototype._matsuffix;
    /** @type {?} */
    MatFormlyFieldConfig.prototype.__formField__;
    /** @type {?} */
    MatFormlyFieldConfig.prototype._componentFactory;
}
var FormlyWrapperFormField = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyWrapperFormField, _super);
    function FormlyWrapperFormField(renderer, elementRef, focusMonitor) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.elementRef = elementRef;
        _this.focusMonitor = focusMonitor;
        _this.stateChanges = new Subject();
        _this._errorState = false;
        _this.initialGapCalculated = false;
        return _this;
    }
    /**
     * @return {?}
     */
    FormlyWrapperFormField.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formField._control = this;
        defineHiddenProp(this.field, '__formField__', this.formField);
        /** @type {?} */
        var fieldComponent = this.formlyField['_componentFactory'];
        if (fieldComponent && !(fieldComponent.componentRef.instance instanceof FieldType)) {
            console.warn("Component '" + fieldComponent.component.prototype.constructor.name + "' must extend 'FieldType' from '@ngx-formly/material'.");
        }
        // fix for https://github.com/angular/material2/issues/11437
        if (this.formlyField.hide && (/** @type {?} */ (this.formlyField.templateOptions)).appearance === 'outline') {
            this.initialGapCalculated = true;
        }
        this.focusMonitor.monitor(this.elementRef, true).subscribe((/**
         * @param {?} origin
         * @return {?}
         */
        function (origin) {
            if (!origin && _this.field.focus) {
                _this.field.focus = false;
            }
            _this.stateChanges.next();
        }));
    };
    /**
     * @return {?}
     */
    FormlyWrapperFormField.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        if (!this.initialGapCalculated || this.formlyField.hide) {
            return;
        }
        this.formField.updateOutlineGap();
        this.initialGapCalculated = true;
    };
    /**
     * @return {?}
     */
    FormlyWrapperFormField.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // temporary fix for https://github.com/angular/material2/issues/7891
        if (this.formField.appearance !== 'outline' && this.to.hideFieldUnderline === true) {
            /** @type {?} */
            var underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');
            underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);
        }
    };
    /**
     * @return {?}
     */
    FormlyWrapperFormField.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        delete this.formlyField.__formField__;
        this.stateChanges.complete();
        this.focusMonitor.stopMonitoring(this.elementRef);
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    FormlyWrapperFormField.prototype.setDescribedByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) { };
    /**
     * @param {?} event
     * @return {?}
     */
    FormlyWrapperFormField.prototype.onContainerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.formlyField.focus = true;
        this.stateChanges.next();
    };
    Object.defineProperty(FormlyWrapperFormField.prototype, "errorState", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);
            if (showError !== this._errorState) {
                this._errorState = showError;
                this.stateChanges.next();
            }
            return showError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "controlType", {
        get: /**
         * @return {?}
         */
        function () { return this.to.type; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "focused", {
        get: /**
         * @return {?}
         */
        function () { return !!this.formlyField.focus && !this.disabled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () { return !!this.to.disabled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () { return !!this.to.required; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () { return this.to.placeholder || ''; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "shouldPlaceholderFloat", {
        get: /**
         * @return {?}
         */
        function () { return this.shouldLabelFloat; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this.formControl.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "ngControl", {
        get: /**
         * @return {?}
         */
        function () { return (/** @type {?} */ (this.formControl)); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () { return !this.formControl.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "shouldLabelFloat", {
        get: /**
         * @return {?}
         */
        function () { return this.focused || !this.empty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyWrapperFormField.prototype, "formlyField", {
        get: /**
         * @return {?}
         */
        function () { return (/** @type {?} */ (this.field)); },
        enumerable: true,
        configurable: true
    });
    FormlyWrapperFormField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-wrapper-mat-form-field',
                    template: "\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"to.floatLabel\"\n      [appearance]=\"to.appearance\"\n      [color]=\"to.color\"\n      [style.width]=\"'100%'\">\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"to.label && to.hideLabel !== true\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n      </mat-label>\n\n      <ng-container matPrefix>\n        <ng-container *ngTemplateOutlet=\"to.prefix ? to.prefix : formlyField._matprefix\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix>\n        <ng-container *ngTemplateOutlet=\"to.suffix ? to.suffix : formlyField._matsuffix\"></ng-container>\n      </ng-container>\n\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-error [id]=\"null\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-hint *ngIf=\"to.description\" [id]=\"null\">{{ to.description }}</mat-hint>\n    </mat-form-field>\n  ",
                    providers: [{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }]
                }] }
    ];
    /** @nocollapse */
    FormlyWrapperFormField.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: FocusMonitor }
    ]; };
    FormlyWrapperFormField.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }],
        formField: [{ type: ViewChild, args: [MatFormField, (/** @type {?} */ ({ static: true })),] }]
    };
    return FormlyWrapperFormField;
}(FieldWrapper));
export { FormlyWrapperFormField };
if (false) {
    /** @type {?} */
    FormlyWrapperFormField.prototype.fieldComponent;
    /** @type {?} */
    FormlyWrapperFormField.prototype.formField;
    /** @type {?} */
    FormlyWrapperFormField.prototype.stateChanges;
    /** @type {?} */
    FormlyWrapperFormField.prototype._errorState;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.initialGapCalculated;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FormlyWrapperFormField.prototype.focusMonitor;
}
//# sourceMappingURL=data:application/json;base64,