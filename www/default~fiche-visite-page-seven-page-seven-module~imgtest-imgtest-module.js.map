{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/text-field.es5.js","webpack:///./node_modules/@angular/material/esm5/checkbox.es5.js","webpack:///./node_modules/@angular/material/esm5/input.es5.js","webpack:///./node_modules/@angular/material/esm5/radio.es5.js","webpack:///./node_modules/@angular/material/esm5/select.es5.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-checkbox.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-form-field.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-input.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-multicheckbox.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-radio.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-select.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material-textarea.js","webpack:///./node_modules/@ngx-formly/material/fesm5/ngx-formly-material.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkG;AACyC;AAC9D;AAC5B;AACK;;AAEtD;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB,6FAA+B,EAAE,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,0CAAK;AACxB;AACA,mBAAmB,EAAE;AACrB,sBAAsB,2EAAa;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,4CAAO;AAChC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB,qBAAqB,EAAE,yCAAyC,EAAE,EAAE;AACxI;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB,qBAAqB,EAAE,0CAA0C,EAAE,EAAE;AACzI;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,sBAAsB,2EAAa;AACnC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mEAAmE,sCAAsC,EAAE;AAC3G;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,8DAAQ,EAAE;AAC1B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN,yDAAyD,sEAAgB,EAAE,8CAA8C,4BAA4B,4DAAM,CAAC,8DAAQ,GAAG,4DAAM,CAAC,oDAAM,GAAG,EAAE,8CAA8C;AACvO;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yCAAyC,sCAAsC,EAAE;AACjF;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS;AACT,MAAM;AACN;AACA,uBAAuB,OAAO,oDAAM,EAAE;AACtC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,oBAAoB,mFAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAS;AACzB,0BAA0B,gEAAS,MAAM,gEAAS;AAClD,4CAA4C,uCAAuC,EAAE;AACrF,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+CAA+C,EAAE;AACpG;AACA;AACA,wCAAwC,+CAA+C,EAAE;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,sDAAsD;AACtD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAQ,EAAE;AAC1B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,mBAAmB,OAAO,mDAAK,iCAAiC;AAChE,mBAAmB,OAAO,mDAAK,iCAAiC;AAChE,mBAAmB,OAAO,mDAAK,kCAAkC;AACjE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,8BAA8B,oEAAc;AAC5C;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAE8E;AAC9E;;;;;;;;;;;;;ACxjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACmP;AACjN;AACe;AACa;AAC+B;AACsD;AACtE;AACpB;AACV;;AAE/C;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC,4DAAc;;AAElD;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,oBAAoB,EAAE;AAC/D;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,4BAA4B,4EAAa,CAAC,yEAAU,CAAC,iFAAkB,CAAC,4EAAa;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,2BAA2B,EAAE;AACjF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+CAA+C,EAAE;AACtE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,kBAAkB,mFAAqB,QAAQ,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,2BAA2B,mFAAqB;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,4BAA4B,EAAE;AACnD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,+5BAA+5B,mBAAmB,kkBAAkkB;AACp/C,yEAAyE,GAAG,UAAU,IAAI,WAAW,4CAA4C,OAAO,UAAU,KAAK,WAAW,yDAAyD,OAAO,2BAA2B,IAAI,kDAAkD,KAAK,qBAAqB,0DAA0D,SAAS,oBAAoB,MAAM,gDAAgD,KAAK,qBAAqB,yDAAyD,KAAK,iDAAiD,oBAAoB,GAAG,6BAA6B,wDAAwD,KAAK,kDAAkD,UAAU,oBAAoB,GAAG,UAAU,yBAAyB,wDAAwD,KAAK,kDAAkD,UAAU,wBAAwB,GAAG,UAAU,0BAA0B,wDAAwD,KAAK,kDAAkD,UAAU,yBAAyB,GAAG,UAAU,qBAAqB,wDAAwD,KAAK,kDAAkD,UAAU,oBAAoB,GAAG,UAAU,0BAA0B,0DAA0D,GAAG,iCAAiC,UAAU,oBAAoB,WAAW,UAAU,qBAAqB,6CAA6C,MAAM,OAAO,QAAQ,SAAS,kBAAkB,kBAAkB,sBAAsB,oBAAoB,cAAc,8FAA8F,eAAe,wCAAwC,sCAAsC,gBAAgB,eAAe,uEAAuE,YAAY,qBAAqB,eAAe,qBAAqB,sBAAsB,oBAAoB,mBAAmB,8BAA8B,qBAAqB,YAAY,cAAc,YAAY,iBAAiB,QAAQ,kBAAkB,sBAAsB,mBAAmB,WAAW,cAAc,wCAAwC,gBAAgB,kBAAkB,6CAA6C,cAAc,eAAe,oBAAoB,6BAA6B,qDAAqD,iBAAiB,mBAAmB,6CAA6C,gBAAgB,kCAAkC,uDAAuD,qBAAqB,yBAAyB,mBAAmB,oBAAoB,uBAAuB,8FAA8F,kDAAkD,gBAAgB,gCAAgC,WAAW,YAAY,eAAe,oEAAoE,YAAY,mEAAmE,YAAY,+HAA+H,UAAU,wBAAwB,MAAM,OAAO,QAAQ,SAAS,kBAAkB,WAAW,6BAA6B,2BAA2B,0BAA0B,uBAAuB,wBAAwB,uBAAuB,WAAW,UAAU,8BAA8B,kBAAkB,kCAAkC,wBAAwB,SAAS,qBAAqB,gBAAgB,yDAAyD,QAAQ,gBAAgB,kBAAkB,mEAAmE,iBAAiB,iBAAiB,8CAA8C,UAAU,mDAAmD,oBAAoB,8CAA8C,mCAAmC,oDAAoD,UAAU,wBAAwB,yDAAyD,oBAAoB,oDAAoD,UAAU,8BAA8B,iDAAiD,6BAA6B,uBAAuB,eAAe,8DAA8D,0DAA0D,kEAAkE,wEAAwE,oEAAoE,0DAA0D,mEAAmE,wEAAwE,8DAA8D,2DAA2D,kEAAkE,uEAAuE,iEAAiE,sEAAsE,iEAAiE,sEAAsE,iEAAiE,qEAAqE,iEAAiE,qEAAqE,oEAAoE,2DAA2D,mEAAmE,uEAAuE,oBAAoB,SAAS,SAAS,mCAAmC,kBAAkB,sBAAsB,qBAAqB,YAAY,WAAW,UAAU,oBAAoB;AAC5uM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,mCAAmC,+DAAiB;AACpD,qCAAqC,qEAAuB;AAC5D,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,8DAAY,EAAE;AAC9B,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,6BAA6B,OAAO,uDAAS,uBAAuB,GAAG;AAChF,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,sCAAsC,GAAG;AACnH,SAAS,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,0FAAqB,IAAI;AACzG,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,yBAAyB;AAC1D,0BAA0B,OAAO,mDAAK,8BAA8B;AACpE,cAAc,OAAO,mDAAK,EAAE;AAC5B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,+BAA+B,OAAO,oDAAM,EAAE;AAC9C,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,yBAAyB,OAAO,uDAAS,oBAAoB;AAC7D,kBAAkB,OAAO,uDAAS,SAAS,gEAAS,IAAI;AACxD,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,yBAAyB,OAAO,mDAAK,EAAE;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,EAAE;AACb;AACA,aAAa,4DAAa;AAC1B,iBAAiB,gEAAU,cAAc,qCAAqC,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,2BAA2B;AAC3B,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,wEAAyB;;AAE3B;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAY,EAAE,sEAAe,EAAE,sEAAe,EAAE,sEAAe;AAC7F,yEAAyE,sEAAe;AACxF;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAE0P;AAC1P;;;;;;;;;;;;;AC9sBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AAC8D;AACuB;AACzD;AACW;AACF;AACK;AACW;AACxD;AACgB;;AAE/C;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,sBAAsB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,uBAAuB,OAAO,mDAAK,2BAA2B;AAC9D,+BAA+B,OAAO,mDAAK,EAAE;AAC7C;AACA;AACA,CAAC,CAAC,2EAAmB;;AAErB;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,mCAAmC,4DAAc;;AAEjD;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,yBAAyB,8EAAe;AACxC;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,oFAAsB,UAAU,EAAE;AACzE,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,iBAAiB,EAAE;AACxC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,+BAA+B,EAAE;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,kBAAkB,mFAAqB,QAAQ,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mBAAmB,EAAE;AAC1C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oFAAsB;AAC7D,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uCAAuC,EAAE;AAC9D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,kBAAkB,mFAAqB,QAAQ,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,gDAAgD,EAAE;AAClD,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iCAAiC,UAAU,gFAAmB,yBAAyB;AACvF,iBAAiB,IAAI;AACrB;AACA;AACA,2CAA2C;AAC3C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAQ,EAAE;AAC1B,SAAS,OAAO,wDAAS,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG;AAC7E,SAAS,OAAO,qDAAM,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC1D,SAAS,OAAO,iEAAkB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AACtE,SAAS,OAAO,wEAAiB,EAAE;AACnC,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG,OAAO,oDAAM,qCAAqC,GAAG;AAClI,SAAS,OAAO,uEAAe,EAAE;AACjC,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,cAAc,OAAO,mDAAK,EAAE;AAC5B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,uEAAe;AACvC,wBAAwB,+EAAkB;AAC1C;AACA;AACA,wBAAwB,uEAAe;AACvC;AACA;AACA,wBAAwB,+EAAkB;AAC1C;AACA;AACA;AACA,gCAAgC,wEAAiB;AACjD,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEsJ;AACtJ;;;;;;;;;;;;;AChvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AACe;AACa;AACO;AAC4J;AAC9K;AACsE;AAC5C;AAC9B;;AAE/C;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mBAAmB,EAAE;AAC1C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE;AAC3C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mDAAmD,8BAA8B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,+DAAiB;AACjC,MAAM;AACN;AACA,kBAAkB,OAAO,oDAAM,EAAE;AACjC,mBAAmB,OAAO,6DAAe,SAAS,gEAAU,cAAc,uBAAuB,EAAE,IAAI,oBAAoB,IAAI;AAC/H,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,yBAAyB,OAAO,mDAAK,EAAE;AACvC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,+BAA+B,yEAAU,CAAC,iFAAkB,CAAC,4EAAa;AAC1E;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sBAAsB,EAAE;AAC7C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,kCAAkC,mFAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE;AAC3C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,mFAAqB;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+CAA+C,EAAE;AACtE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,2ZAA2Z,mBAAmB,qmBAAqmB;AACnhC,gDAAgD,qBAAqB,wCAAwC,UAAU,iBAAiB,eAAe,oBAAoB,mBAAmB,mBAAmB,sBAAsB,qBAAqB,sBAAsB,qBAAqB,kBAAkB,WAAW,YAAY,cAAc,wBAAwB,sBAAsB,YAAY,OAAO,kBAAkB,MAAM,mCAAmC,WAAW,iBAAiB,mBAAmB,kBAAkB,iDAAiD,gBAAgB,wBAAwB,kBAAkB,sBAAsB,YAAY,OAAO,kBAAkB,MAAM,4DAA4D,WAAW,sBAAsB,iDAAiD,gBAAgB,2CAA2C,oBAAoB,kCAAkC,2CAA2C,mBAAmB,yBAAyB,qBAAqB,QAAQ,oBAAoB,iBAAiB,gBAAgB,mCAAmC,kBAAkB,eAAe,gDAAgD,SAAS,eAAe,kBAAkB,0DAA0D,gBAAgB,iBAAiB,yDAAyD,eAAe,oCAAoC,kBAAkB,sBAAsB,qBAAqB,YAAY,WAAW,UAAU,oBAAoB,0FAA0F,YAAY,6BAA6B,WAAW,YAAY,eAAe,wDAAwD,YAAY,oFAAoF,YAAY,yGAAyG,UAAU,oBAAoB,wDAAwD,cAAc,iBAAiB,SAAS,SAAS;AACnoE;AACA,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qCAAqC,qEAAuB;AAC5D,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,oCAAoC,OAAO,sDAAQ,EAAE,GAAG;AACjE,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,8DAAY,EAAE;AAC9B,SAAS,OAAO,kFAAyB,EAAE;AAC3C,SAAS,6BAA6B,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,0FAAqB,IAAI;AACzG,MAAM;AACN;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,yBAAyB;AAC1D,0BAA0B,OAAO,mDAAK,8BAA8B;AACpE,2BAA2B,OAAO,mDAAK,+BAA+B;AACtE,mBAAmB,OAAO,mDAAK,EAAE;AACjC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,yBAAyB,OAAO,mDAAK,EAAE;AACvC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,yBAAyB,OAAO,uDAAS,oBAAoB;AAC7D;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAY,EAAE,sEAAe,EAAE,sEAAe;AAC5E,6DAA6D,sEAAe;AAC5E;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAE+J;AAC/J;;;;;;;;;;;;;ACp2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACiF;AAC/C;AAC4C;AAC3B;AACW;AACJ;AACwE;AAC/C;AAC5B;AACgO;AAChN;AACuM;AACzK;AACxD;AAC6D;AAC3D;;AAE/C;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAO;AAC3B,QAAQ,iEAAK,SAAS,iEAAK;AAC3B;AACA;AACA;AACA,SAAS;AACT,QAAQ,iEAAK,YAAY,iEAAK;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,iEAAK,qBAAqB,iEAAK;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,sEAAU,cAAc,mEAAO;AACvC,QAAQ,sEAAU,cAAc,mEAAO,sBAAsB,iEAAK,EAAE,aAAa;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,QAAQ,iEAAK,YAAY,iEAAK,EAAE,aAAa;AAC7C,QAAQ,sEAAU;AAClB,YAAY,iEAAK,EAAE,aAAa;AAChC,YAAY,mEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,qCAAqC,4DAAc;AACnD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,8CAA8C;AACtE;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,0BAA0B,kFAAkB,CAAC,6EAAa,CAAC,6EAAa,CAAC,+EAAe;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6CAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mDAAK;AAC5C;AACA,uBAAuB,2CAAK,oDAAoD,iCAAiC,EAAE;AACnH;AACA;AACA;AACA,sBAAsB,4DAAI,KAAK,iEAAS,cAAc,qCAAqC,EAAE;AAC7F,SAAS;AACT;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA,sDAAsD,8DAAM,eAAe,UAAU,EAAE,GAAG,2DAAG,cAAc,EAAE;AAC7G;AACA;AACA;AACA,sDAAsD,8DAAM,eAAe,WAAW,EAAE,GAAG,2DAAG,cAAc,EAAE;AAC9G;AACA;AACA;AACA,oCAAoC,0DAAY;AAChD;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,mFAAqB;AAClD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,uBAAuB,EAAE;AAC9C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,6BAA6B,mFAAqB;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qCAAqC,EAAE;AAC5D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,2CAA2C,mFAAqB;AAChE,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE;AAC3C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,iBAAiB,EAAE;AACxC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mCAAmC,uEAAc;AACjD;AACA;AACA;AACA;AACA;AACA,kBAAkB,4EAAoB,IAAI,iEAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2CAA2C,iEAAS;AACpD,mDAAmD,wBAAwB,EAAE;AAC7E,qDAAqD,0BAA0B,EAAE;AACjF,SAAS;AACT,kCAAkC,iEAAS,QAAQ,iEAAS;AAC5D;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4DAAI;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2FAA2F,yBAAyB,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,qCAAqC,gEAAU,gBAAgB,8DAAQ;AACvE,wBAAwB,gEAAU,gBAAgB,iEAAW;AAC7D,mBAAmB,EAAE;AACrB,oCAAoC,2DAAK,gBAAgB,2DAAK;AAC9D,mBAAmB,EAAE;AACrB;AACA;AACA,2BAA2B,4EAAc;AACzC,mCAAmC;AACnC;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,4BAA4B,0DAAI,gBAAgB,yDAAG;AACnD,4BAA4B,0DAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,qCAAqC,gEAAU,gBAAgB,8DAAQ;AACvE,mBAAmB,EAAE;AACrB;AACA,wBAAwB,0DAAI,gBAAgB,yDAAG;AAC/C;AACA,wBAAwB,0DAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAK,gBAAgB,2DAAK;AACxD,aAAa,4EAAc;AAC3B;AACA;AACA;AACA,+CAA+C,uDAAC;AAChD;AACA,uBAAuB,EAAE;AACzB,2EAA2E,uCAAuC,EAAE;AACpH;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,4CAA4C,4DAAI;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yCAAyC,EAAE;AAC9F;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+BAA+B,4EAA0B;AACzD;AACA;AACA;AACA;AACA,qCAAqC,iEAAS;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC,iEAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,mDAAK;AACtC,yCAAyC,iEAAS;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,2CAAK,mDAAmD,6BAA6B,EAAE,QAAQ,iEAAS;AAChH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uCAAuC,EAAE,6CAA6C,qBAAqB,EAAE;AAC7G;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8DAA8D,kBAAkB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yBAAyB,6FAA6B;AACtD,6CAA6C,wFAAwB;AACrE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,gEAAgE,EAAE;AAClE,gCAAgC,6FAA6B;AAC7D;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA,yRAAyR,yBAAyB,8HAA8H,0BAA0B,4uBAA4uB,oBAAoB;AAC1sC,0CAA0C,qBAAqB,WAAW,UAAU,oBAAoB,qBAAqB,eAAe,kBAAkB,sBAAsB,yCAAyC,yBAAyB,sBAAsB,qBAAqB,iBAAiB,eAAe,kBAAkB,mBAAmB,YAAY,WAAW,gBAAgB,uBAAuB,mBAAmB,uBAAuB,mBAAmB,gBAAgB,uBAAuB,0BAA0B,mBAAmB,sBAAsB,0DAA0D,2BAA2B,6DAA6D,2BAA2B,0HAA0H,2BAA2B,2FAA2F,oDAAoD,mHAAmH,gBAAgB,kBAAkB,QAAQ,SAAS,kCAAkC,mCAAmC,qBAAqB,aAAa,kBAAkB,gBAAgB,gBAAgB,cAAc,iCAAiC,cAAc,iBAAiB,iBAAiB,eAAe,kBAAkB,kCAAkC,kBAAkB,mBAAmB,oEAAoE,kBAAkB,gBAAgB,WAAW,mFAAmF,eAAe,sDAAsD,wBAAwB,wBAAwB,sDAAsD,iDAAiD,gBAAgB,yDAAyD,kBAAkB,oCAAoC,gBAAgB,cAAc;AAC/lE;AACA,mCAAmC,+DAAiB;AACpD,qCAAqC,qEAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB,UAAU,iFAAmB,0BAA0B;AAChF,yBAAyB,UAAU,mFAA2B;AAC9D;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,4CAA4C;AAC5C,SAAS,OAAO,oEAAa,EAAE;AAC/B,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,OAAO,yEAAiB,EAAE;AACnC,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,OAAO,sDAAM,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC1D,SAAS,OAAO,kEAAkB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AACtE,SAAS,OAAO,0EAAY,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAChE,SAAS,OAAO,yDAAS,gBAAgB,OAAO,kDAAI,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AAC7E,SAAS,6BAA6B,OAAO,uDAAS,uBAAuB,GAAG;AAChF,SAAS,gCAAgC,OAAO,oDAAM,uCAAuC,GAAG;AAChG,SAAS,OAAO,+DAAa;AAC7B,MAAM;AACN;AACA,mBAAmB,OAAO,uDAAS,sBAAsB;AACzD,iBAAiB,OAAO,uDAAS,oBAAoB;AACrD,sBAAsB,OAAO,uDAAS,SAAS,wEAAmB,IAAI;AACtE,mBAAmB,OAAO,6DAAe,SAAS,iEAAS,GAAG,oBAAoB,IAAI;AACtF,wBAAwB,OAAO,6DAAe,SAAS,mEAAW,IAAI;AACtE,sBAAsB,OAAO,mDAAK,EAAE;AACpC,yBAAyB,OAAO,0DAAY,6BAA6B;AACzE,uBAAuB,OAAO,mDAAK,EAAE;AACrC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kCAAkC,OAAO,mDAAK,EAAE;AAChD,uBAAuB,OAAO,mDAAK,EAAE;AACrC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,qBAAqB,OAAO,mDAAK,yBAAyB;AAC1D,0BAA0B,OAAO,mDAAK,8BAA8B;AACpE,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,0BAA0B,OAAO,mDAAK,EAAE;AACxC,cAAc,OAAO,mDAAK,EAAE;AAC5B,wBAAwB,OAAO,oDAAM,EAAE;AACvC,yBAAyB,OAAO,oDAAM,qBAAqB;AAC3D,yBAAyB,OAAO,oDAAM,qBAAqB;AAC3D,2BAA2B,OAAO,oDAAM,EAAE;AAC1C,uBAAuB,OAAO,oDAAM,EAAE;AACtC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,wBAAwB,6DAAY;AACpC,wBAAwB,kEAAa;AACrC,wBAAwB,uEAAe;AACvC,wBAAwB,uEAAe;AACvC;AACA,8BAA8B,gFAAkB,+BAA+B,uEAAe,EAAE,uEAAe;AAC/G;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEA;AACA;AACA,cAAc,uEAAuE;AACrF;;AAEsb;AACtb;;;;;;;;;;;;;ACp+DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACC;AACK;AACnB;AAC6B;AACuB;AACV;;AAE5E;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,8VAA8V,YAAY;AAC1W,iBAAiB;AACjB;AACA;AACA,oBAAoB,OAAO,uDAAS,SAAS,sEAAW,IAAI;AAC5D;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,4EAAiB;AACzC,wBAAwB,wFAAwB;AAChD,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEwD;;AAExD,wD;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACM;AACgD;AACpD;AACf;AAC4E;AAClB;AAC7D;;AAE/B;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,8BAA8B,EAAE;AACrD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,gBAAgB,0EAAiB;AACjC,gBAAgB,0EAAiB;AACjC,6BAA6B,EAAE;AAC/B,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,iBAAiB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,mCAAmC,kDAAI;AACtE,mCAAmC,EAAE;AACrC;AACA,+BAA+B,EAAE;AACjC,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,6CAA6C,EAAE;AACpE;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,kCAAkC,EAAE;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,8BAA8B,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+BAA+B,EAAE;AACtD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,oCAAoC,EAAE;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE,wBAAwB,EAAE;AACrE;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,6EAA6E,EAAE;AACpG;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oCAAoC,EAAE;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,kCAAkC,EAAE,2CAA2C,EAAE;AACtG;AACA;AACA,KAAK;AACL;AACA,qBAAqB,OAAO,uDAAS,wBAAwB;AAC7D,qBAAqB,OAAO,uDAAS,wBAAwB;AAC7D;AACA;AACA,CAAC,CAAC,0DAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,QAAQ,0EAAiB;AACzB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,iBAAiB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,qBAAqB,EAAE;AAC5C;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mDAAmD,EAAE;AAC1E;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,kCAAkC,EAAE;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,8BAA8B,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+BAA+B,EAAE;AACtD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE,wBAAwB,EAAE;AACrE;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,gCAAgC,EAAE;AACvD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oCAAoC,EAAE;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,oBAAoB,EAAE,kBAAkB,EAAE;AAC/D;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,4bAA4b,YAAY,o1BAAo1B,kBAAkB;AAC9yC,iCAAiC,UAAU,gFAAmB,uCAAuC;AACrG,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAY;AAC5B,MAAM;AACN;AACA,0BAA0B,OAAO,uDAAS,uCAAuC,EAAE,MAAM,OAAO,8DAAgB,gBAAgB,MAAM;AACtI,qBAAqB,OAAO,uDAAS,SAAS,yEAAY,cAAc,EAAE,MAAM,eAAe,MAAM;AACrG;AACA;AACA,CAAC,CAAC,6DAAY;;AAEd;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,+EAAkB;AAC1C,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA,iCAAiC;AACjC,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE4F;;AAE5F,0D;;;;;;;;;;;;AC1gBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACC;AACK;AACnB;AAC6B;AACI;AACmB;;AAEtF;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,sEAAsE;AACtE,iBAAiB;AACjB;AACA;AACA,4BAA4B,OAAO,uDAAS,SAAS,gEAAQ,cAAc,EAAE,MAAM,eAAe,MAAM;AACxG;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,sEAAc;AACtC,wBAAwB,wFAAwB;AAChD,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEkD;;AAElD,qD;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACM;AACL;AACa;AACP;AACY;AACoB;AACV;;AAE5E;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAQ,4CAA4C,sDAAQ;AAC9E,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,0BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA,wCAAwC,sDAAQ,GAAG,kCAAkC;AACrF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,yHAAyH,eAAe,kbAAkb,gBAAgB;AAC1kB,iBAAiB;AACjB;AACA;AACA,sBAAsB,OAAO,0DAAY,SAAS,sEAAW,IAAI;AACjE;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,4EAAiB;AACzC,wBAAwB,wFAAwB;AAChD,wBAAwB,0EAAkB;AAC1C,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEkE;;AAElE,6D;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACC;AACK;AACQ;AAC3B;AAC6B;AACuB;AACd;;AAExE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,sQAAsQ,eAAe,4JAA4J,gBAAgB;AACjc,iBAAiB;AACjB;AACA;AACA,sBAAsB,OAAO,uDAAS,SAAS,qEAAa,IAAI;AAChE;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,sEAAc;AACtC,wBAAwB,wFAAwB;AAChD,wBAAwB,0EAAkB;AAC1C,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA,iCAAiC;AACjC,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEkD;;AAElD,qD;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACM;AACL;AACa;AACjB;AACmB;AACO;AACgB;AACrB;;AAEjE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,0BAA0B;AAC1B,0DAA0D,sDAAQ,mCAAmC,EAAE;AACvG;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,8BAA8B,gBAAgB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,wUAAwU,sBAAsB,ivBAAivB,+BAA+B,oSAAoS,eAAe,0JAA0J,cAAc;AACzkD,iBAAiB;AACjB;AACA;AACA,4BAA4B,OAAO,uDAAS,SAAS,kEAAS,cAAc,EAAE,MAAM,eAAe,MAAM;AACzG;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,wEAAe;AACvC,wBAAwB,8EAAuB;AAC/C,wBAAwB,wFAAwB;AAChD,wBAAwB,0EAAkB;AAC1C,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA,iCAAiC;AACjC,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEoD;;AAEpD,sD;;;;;;;;;;;;ACpLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACC;AACK;AACnB;AAC6B;AAC8B;AACP;;AAEtF;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU,gFAAwB,oCAAoC;AAC/F;AACA,iBAAiB;AACjB;AACA;AACA,4BAA4B,OAAO,uDAAS,SAAS,gEAAQ,cAAc,EAAE,MAAM,eAAe,MAAM;AACxG;AACA;AACA,CAAC,CAAC,yEAAS;;AAEX;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,kEAAmB;AAC3C,wBAAwB,sEAAc;AACtC,wBAAwB,wFAAwB;AAChD,wBAAwB,6DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEwD;;AAExD,wD;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACkC;AACf;AACM;AACM;AACN;AACM;AACU;AACd;;AAEpE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,wBAAwB,wFAAwB;AAChD,wBAAwB,+EAAoB;AAC5C,wBAAwB,qFAAuB;AAC/C,wBAAwB,+EAAoB;AAC5C,wBAAwB,qFAAuB;AAC/C,wBAAwB,+FAA4B;AACpD,wBAAwB,iFAAqB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEgC;;AAEhC,+C","file":"default~fiche-visite-page-seven-page-seven-module~imgtest-imgtest-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nvar listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nvar AutofillMonitor = /** @class */ (function () {\n    function AutofillMonitor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    AutofillMonitor.prototype.monitor = /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    function (elementOrRef) {\n        var _this = this;\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        var element = coerceElement(elementOrRef);\n        /** @type {?} */\n        var info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        var result = new Subject();\n        /** @type {?} */\n        var cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        var listener = (/** @type {?} */ ((function (event) {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true }); });\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false }); });\n            }\n        })));\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: function () {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    };\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    AutofillMonitor.prototype.stopMonitoring = /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    function (elementOrRef) {\n        /** @type {?} */\n        var element = coerceElement(elementOrRef);\n        /** @type {?} */\n        var info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AutofillMonitor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._monitoredElements.forEach(function (_info, element) { return _this.stopMonitoring(element); });\n    };\n    AutofillMonitor.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    AutofillMonitor.ctorParameters = function () { return [\n        { type: Platform },\n        { type: NgZone }\n    ]; };\n    /** @nocollapse */ AutofillMonitor.ngInjectableDef = defineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(inject(Platform), inject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n    return AutofillMonitor;\n}());\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nvar CdkAutofill = /** @class */ (function () {\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    CdkAutofill.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(function (event) { return _this.cdkAutofill.emit(event); });\n    };\n    /**\n     * @return {?}\n     */\n    CdkAutofill.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    };\n    CdkAutofill.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkAutofill]',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkAutofill.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: AutofillMonitor }\n    ]; };\n    CdkAutofill.propDecorators = {\n        cdkAutofill: [{ type: Output }]\n    };\n    return CdkAutofill;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar CdkTextareaAutosize = /** @class */ (function () {\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\n        /** Minimum amount of rows in the textarea. */\n        get: /**\n         * Minimum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._minRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minRows = value;\n            this._setMinHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\n        /** Maximum amount of rows in the textarea. */\n        get: /**\n         * Maximum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._maxRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxRows = value;\n            this._setMaxHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\n        /** Whether autosizing is enabled or not */\n        get: /**\n         * Whether autosizing is enabled or not\n         * @return {?}\n         */\n        function () { return this._enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            value = coerceBooleanProperty(value);\n            // Only act if the actual value changed. This specifically helps to not run\n            // resizeToFitContent too early (i.e. before ngAfterViewInit)\n            if (this._enabled !== value) {\n                (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._setMinHeight = /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var minHeight = this.minRows && this._cachedLineHeight ?\n            this.minRows * this._cachedLineHeight + \"px\" : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    };\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._setMaxHeight = /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var maxHeight = this.maxRows && this._cachedLineHeight ?\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(function () {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(_this._destroyed))\n                    .subscribe(function () { return _this.resizeToFitContent(true); });\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._cacheTextareaLineHeight = /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        var textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.resizeToFitContent = /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    function (force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        var textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        var value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        var placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        var height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = height + \"px\";\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(function () {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(function () { return _this._scrollToCaretPosition(textarea); });\n            }\n            else {\n                setTimeout(function () { return _this._scrollToCaretPosition(textarea); });\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    };\n    /**\n     * Resets the textarea to it's original size\n     */\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.reset = /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    function () {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._noopInputHandler = /**\n     * @return {?}\n     */\n    function () {\n        // no-op handler that ensures we're running change detection on input events.\n    };\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._scrollToCaretPosition = /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    function (textarea) {\n        var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    };\n    CdkTextareaAutosize.decorators = [\n        { type: Directive, args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkTextareaAutosize.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgZone }\n    ]; };\n    CdkTextareaAutosize.propDecorators = {\n        minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n        maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n        enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }]\n    };\n    return CdkTextareaAutosize;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TextFieldModule = /** @class */ (function () {\n    function TextFieldModule() {\n    }\n    TextFieldModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    imports: [PlatformModule],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                },] },\n    ];\n    return TextFieldModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n//# sourceMappingURL=text-field.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\nvar MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nvar nextUniqueId = 0;\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\n/** @type {?} */\nvar calculatedRippleRadius = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nvar MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatCheckbox; }),\n    multi: true\n};\n/** @enum {number} */\nvar TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\nvar  /**\n * Change event object emitted by MatCheckbox.\n */\nMatCheckboxChange = /** @class */ (function () {\n    function MatCheckboxChange() {\n    }\n    return MatCheckboxChange;\n}());\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nMatCheckboxBase = /** @class */ (function () {\n    function MatCheckboxBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatCheckboxBase;\n}());\n/** @type {?} */\nvar _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nvar MatCheckbox = /** @class */ (function (_super) {\n    __extends(MatCheckbox, _super);\n    function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._focusMonitor = _focusMonitor;\n        _this._ngZone = _ngZone;\n        _this._clickAction = _clickAction;\n        _this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        _this.ariaLabelledby = null;\n        _this._uniqueId = \"mat-checkbox-\" + ++nextUniqueId;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        _this.id = _this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        _this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        _this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        _this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        _this._onTouched = function () { };\n        _this._currentAnimationClass = '';\n        _this._currentCheckState = TransitionCheckState.Init;\n        _this._controlValueAccessorChangeFn = function () { };\n        _this._checked = false;\n        _this._disabled = false;\n        _this._indeterminate = false;\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        _this._focusMonitor.monitor(elementRef, true).subscribe(function (focusOrigin) {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(function () { return _this._onTouched(); });\n            }\n        });\n        return _this;\n    }\n    Object.defineProperty(MatCheckbox.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */\n        function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"required\", {\n        /** Whether the checkbox is required. */\n        get: /**\n         * Whether the checkbox is required.\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n    function () {\n        this._calculateRippleRadius();\n    };\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    Object.defineProperty(MatCheckbox.prototype, \"checked\", {\n        /**\n         * Whether the checkbox is checked.\n         */\n        get: /**\n         * Whether the checkbox is checked.\n         * @return {?}\n         */\n        function () { return this._checked; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value != this.checked) {\n                this._checked = value;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"disabled\", {\n        /**\n         * Whether the checkbox is disabled. This fully overrides the implementation provided by\n         * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n         */\n        get: /**\n         * Whether the checkbox is disabled. This fully overrides the implementation provided by\n         * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this.disabled) {\n                this._disabled = newValue;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"indeterminate\", {\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         */\n        get: /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         * @return {?}\n         */\n        function () { return this._indeterminate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var changed = value != this._indeterminate;\n            this._indeterminate = value;\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(TransitionCheckState.Indeterminate);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype._isRippleDisabled = /**\n     * @return {?}\n     */\n    function () {\n        return this.disableRipple || this.disabled;\n    };\n    /** Method being called whenever the label text changes. */\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    MatCheckbox.prototype._onLabelTextChange = /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    function () {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and it's children.\n        this._changeDetectorRef.detectChanges();\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatCheckbox.prototype.writeValue = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.checked = !!value;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatCheckbox.prototype.registerOnChange = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatCheckbox.prototype.registerOnTouched = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatCheckbox.prototype.setDisabledState = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype._getAriaChecked = /**\n     * @return {?}\n     */\n    function () {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    };\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    MatCheckbox.prototype._transitionCheckState = /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    function (newState) {\n        /** @type {?} */\n        var oldState = this._currentCheckState;\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            var animationClass_1 = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    element.classList.remove(animationClass_1);\n                }, 1000);\n            });\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    MatCheckbox.prototype._emitChangeEvent = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    };\n    /** Toggles the `checked` state of the checkbox. */\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    MatCheckbox.prototype.toggle = /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    MatCheckbox.prototype._onInputClick = /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var _this = this;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(function () {\n                    _this._indeterminate = false;\n                    _this.indeterminateChange.emit(_this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    };\n    /** Focuses the checkbox. */\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    MatCheckbox.prototype.focus = /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    function () {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatCheckbox.prototype._onInteractionEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    };\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    MatCheckbox.prototype._getAnimationClassForCheckStateTransition = /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    function (oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        var animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return \"mat-checkbox-anim-\" + animSuffix;\n    };\n    // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n    // landed.\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     */\n    // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n    // landed.\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     * @private\n     * @return {?}\n     */\n    MatCheckbox.prototype._calculateRippleRadius = \n    // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n    // landed.\n    /**\n     * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n     * for the application.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!calculatedRippleRadius) {\n            /** @type {?} */\n            var rippleWidth = this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n            calculatedRippleRadius = rippleWidth / 2;\n        }\n        this.ripple.radius = calculatedRippleRadius;\n    };\n    MatCheckbox.decorators = [\n        { type: Component, args: [{selector: 'mat-checkbox',\n                    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                    styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n                    exportAs: 'matCheckbox',\n                    host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\",\n                    },\n                    providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                    inputs: ['disableRipple', 'color', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatCheckbox.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: NgZone },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ]; };\n    MatCheckbox.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        id: [{ type: Input }],\n        required: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        name: [{ type: Input }],\n        change: [{ type: Output }],\n        indeterminateChange: [{ type: Output }],\n        value: [{ type: Input }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }],\n        ripple: [{ type: ViewChild, args: [MatRipple,] }],\n        checked: [{ type: Input }],\n        disabled: [{ type: Input }],\n        indeterminate: [{ type: Input }]\n    };\n    return MatCheckbox;\n}(_MatCheckboxMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatCheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nvar MatCheckboxRequiredValidator = /** @class */ (function (_super) {\n    __extends(MatCheckboxRequiredValidator, _super);\n    function MatCheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatCheckboxRequiredValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatCheckboxModule = /** @class */ (function () {\n    function MatCheckboxModule() {\n    }\n    MatCheckboxModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n                    exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n                    declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n                },] },\n    ];\n    return MatCheckboxModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n//# sourceMappingURL=checkbox.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, NgZone, Optional, Self, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nvar MatTextareaAutosize = /** @class */ (function (_super) {\n    __extends(MatTextareaAutosize, _super);\n    function MatTextareaAutosize() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMinRows\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.minRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.minRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMaxRows\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.maxRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.maxRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matTextareaAutosize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    MatTextareaAutosize.decorators = [\n        { type: Directive, args: [{\n                    selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                    exportAs: 'matTextareaAutosize',\n                    inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                    host: {\n                        'class': 'cdk-textarea-autosize mat-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                },] },\n    ];\n    MatTextareaAutosize.propDecorators = {\n        matAutosizeMinRows: [{ type: Input }],\n        matAutosizeMaxRows: [{ type: Input }],\n        matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n        matTextareaAutosize: [{ type: Input }]\n    };\n    return MatTextareaAutosize;\n}(CdkTextareaAutosize));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by matInput.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nvar MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nvar nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nMatInputBase = /** @class */ (function () {\n    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatInputBase;\n}());\n/** @type {?} */\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nvar MatInput = /** @class */ (function (_super) {\n    __extends(MatInput, _super);\n    function MatInput(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this._platform = _platform;\n        _this.ngControl = ngControl;\n        _this._autofillMonitor = _autofillMonitor;\n        _this._uid = \"mat-input-\" + nextUniqueId++;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        _this._isServer = false;\n        /**\n         * Whether the component is a native html select.\n         */\n        _this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.autofilled = false;\n        _this._disabled = false;\n        _this._required = false;\n        _this._type = 'text';\n        _this._readonly = false;\n        _this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        /** @type {?} */\n        var element = _this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        _this._inputValueAccessor = inputValueAccessor || element;\n        _this._previousNativeValue = _this.value;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(function () {\n                _elementRef.nativeElement.addEventListener('keyup', function (event) {\n                    /** @type {?} */\n                    var el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        _this._isServer = !_this._platform.isBrowser;\n        _this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (_this._isNativeSelect) {\n            _this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n        return _this;\n    }\n    Object.defineProperty(MatInput.prototype, \"disabled\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"id\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"required\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"type\", {\n        /** Input type of the element. */\n        get: /**\n         * Input type of the element.\n         * @return {?}\n         */\n        function () { return this._type; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"value\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._inputValueAccessor.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"readonly\", {\n        /** Whether the element is readonly. */\n        get: /**\n         * Whether the element is readonly.\n         * @return {?}\n         */\n        function () { return this._readonly; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._readonly = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n                _this.autofilled = event.isAutofilled;\n                _this.stateChanges.next();\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    };\n    /** Focuses the input. */\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    MatInput.prototype.focus = /**\n     * Focuses the input.\n     * @return {?}\n     */\n    function () {\n        this._elementRef.nativeElement.focus();\n    };\n    /** Callback for the cases where the focused state of the input changes. */\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    MatInput.prototype._focusChanged = /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    function (isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype._onInput = /**\n     * @return {?}\n     */\n    function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /** Does some manual dirty checking on the native input `value` property. */\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    MatInput.prototype._dirtyCheckNativeValue = /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    };\n    /** Make sure the input is a supported type. */\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    MatInput.prototype._validateType = /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    };\n    /** Checks whether the input type is one of the types that are never empty. */\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    MatInput.prototype._isNeverEmpty = /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    };\n    /** Checks whether the input is invalid based on the native validation. */\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    MatInput.prototype._isBadInput = /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        var validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    };\n    /** Determines if the component host is a textarea. */\n    /**\n     * Determines if the component host is a textarea.\n     * @protected\n     * @return {?}\n     */\n    MatInput.prototype._isTextarea = /**\n     * Determines if the component host is a textarea.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    };\n    Object.defineProperty(MatInput.prototype, \"empty\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n                !this.autofilled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            if (this._isNativeSelect) {\n                // For a single-selection `<select>`, the label should float when the selected option has\n                // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n                // overlapping the label with the options.\n                /** @type {?} */\n                var selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n                /** @type {?} */\n                var firstOption = selectElement.options[0];\n                // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n                // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n                return this.focused || selectElement.multiple || !this.empty ||\n                    !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n            }\n            else {\n                return this.focused || !this.empty;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    MatInput.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        this._ariaDescribedby = ids.join(' ');\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatInput.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    };\n    MatInput.decorators = [\n        { type: Directive, args: [{\n                    selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '[attr.placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-required]': 'required.toString()',\n                        '(blur)': '_focusChanged(false)',\n                        '(focus)': '_focusChanged(true)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                },] },\n    ];\n    /** @nocollapse */\n    MatInput.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n        { type: AutofillMonitor },\n        { type: NgZone }\n    ]; };\n    MatInput.propDecorators = {\n        disabled: [{ type: Input }],\n        id: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        type: [{ type: Input }],\n        errorStateMatcher: [{ type: Input }],\n        value: [{ type: Input }],\n        readonly: [{ type: Input }]\n    };\n    return MatInput;\n}(_MatInputMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatInputModule = /** @class */ (function () {\n    function MatInputModule() {\n    }\n    MatInputModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [MatInput, MatTextareaAutosize],\n                    imports: [\n                        CommonModule,\n                        TextFieldModule,\n                        MatFormFieldModule,\n                    ],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                        MatTextareaAutosize,\n                    ],\n                    providers: [ErrorStateMatcher],\n                },] },\n    ];\n    return MatInputModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };\n//# sourceMappingURL=input.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatRadioGroup; }),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nvar  /**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nMatRadioChange = /** @class */ (function () {\n    function MatRadioChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatRadioChange;\n}());\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nvar MatRadioGroup = /** @class */ (function () {\n    function MatRadioGroup(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = \"mat-radio-group-\" + nextUniqueId++;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = function () { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = function () { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    Object.defineProperty(MatRadioGroup.prototype, \"name\", {\n        /** Name of the radio button group. All radio buttons inside this group will use this name. */\n        get: /**\n         * Name of the radio button group. All radio buttons inside this group will use this name.\n         * @return {?}\n         */\n        function () { return this._name; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"labelPosition\", {\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        get: /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         * @return {?}\n         */\n        function () {\n            return this._labelPosition;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this._labelPosition = v === 'before' ? 'before' : 'after';\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"value\", {\n        /**\n         * Value for the radio-group. Should equal the value of the selected radio button if there is\n         * a corresponding radio button with a matching value. If there is not such a corresponding\n         * radio button, this value persists to be applied in case a new radio button is added with a\n         * matching value.\n         */\n        get: /**\n         * Value for the radio-group. Should equal the value of the selected radio button if there is\n         * a corresponding radio button with a matching value. If there is not such a corresponding\n         * radio button, this value persists to be applied in case a new radio button is added with a\n         * matching value.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        function (newValue) {\n            if (this._value !== newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatRadioGroup.prototype._checkSelectedRadioButton = /**\n     * @return {?}\n     */\n    function () {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    };\n    Object.defineProperty(MatRadioGroup.prototype, \"selected\", {\n        /**\n         * The currently selected radio button. If set to a new radio button, the radio group value\n         * will be updated to match the new selected button.\n         */\n        get: /**\n         * The currently selected radio button. If set to a new radio button, the radio group value\n         * will be updated to match the new selected button.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} selected\n         * @return {?}\n         */\n        function (selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"disabled\", {\n        /** Whether the radio group is disabled */\n        get: /**\n         * Whether the radio group is disabled\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioGroup.prototype, \"required\", {\n        /** Whether the radio group is required */\n        get: /**\n         * Whether the radio group is required\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    MatRadioGroup.prototype.ngAfterContentInit = /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    function () {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    };\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    MatRadioGroup.prototype._touch = /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    function () {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    MatRadioGroup.prototype._updateRadioButtonNames = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._radios) {\n            this._radios.forEach(function (radio) {\n                radio.name = _this.name;\n            });\n        }\n    };\n    /** Updates the `selected` radio button from the internal _value state. */\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    MatRadioGroup.prototype._updateSelectedRadioFromValue = /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(function (radio) {\n                radio.checked = _this.value === radio.value;\n                if (radio.checked) {\n                    _this._selected = radio;\n                }\n            });\n        }\n    };\n    /** Dispatch change event with current selection and group value. */\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MatRadioGroup.prototype._emitChangeEvent = /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    function () {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatRadioGroup.prototype._markRadiosForCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this._radios) {\n            this._radios.forEach(function (radio) { return radio._markForCheck(); });\n        }\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    MatRadioGroup.prototype.writeValue = /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    };\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MatRadioGroup.prototype.registerOnChange = /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    MatRadioGroup.prototype.registerOnTouched = /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    MatRadioGroup.prototype.setDisabledState = /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    };\n    MatRadioGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-radio-group',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatRadioGroup.ctorParameters = function () { return [\n        { type: ChangeDetectorRef }\n    ]; };\n    MatRadioGroup.propDecorators = {\n        change: [{ type: Output }],\n        _radios: [{ type: ContentChildren, args: [forwardRef(function () { return MatRadioButton; }), { descendants: true },] }],\n        name: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        value: [{ type: Input }],\n        selected: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }]\n    };\n    return MatRadioGroup;\n}());\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nMatRadioButtonBase = /** @class */ (function () {\n    function MatRadioButtonBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatRadioButtonBase;\n}());\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nvar _MatRadioButtonMixinBase = mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nvar MatRadioButton = /** @class */ (function (_super) {\n    __extends(MatRadioButton, _super);\n    function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._changeDetector = _changeDetector;\n        _this._focusMonitor = _focusMonitor;\n        _this._radioDispatcher = _radioDispatcher;\n        _this._animationMode = _animationMode;\n        _this._uniqueId = \"mat-radio-\" + ++nextUniqueId;\n        /**\n         * The unique ID for the radio button.\n         */\n        _this.id = _this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        _this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        _this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        _this._removeUniqueSelectionListener = function () { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        _this.radioGroup = radioGroup;\n        _this._removeUniqueSelectionListener =\n            _radioDispatcher.listen(function (id, name) {\n                if (id !== _this.id && name === _this.name) {\n                    _this.checked = false;\n                }\n            });\n        return _this;\n    }\n    Object.defineProperty(MatRadioButton.prototype, \"checked\", {\n        /** Whether this radio button is checked. */\n        get: /**\n         * Whether this radio button is checked.\n         * @return {?}\n         */\n        function () { return this._checked; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newCheckedState = coerceBooleanProperty(value);\n            if (this._checked !== newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n                this._changeDetector.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"value\", {\n        /** The value of this radio button. */\n        get: /**\n         * The value of this radio button.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._value !== value) {\n                this._value = value;\n                if (this.radioGroup !== null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value === value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"labelPosition\", {\n        /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n        get: /**\n         * Whether the label should appear after or before the radio button. Defaults to 'after'\n         * @return {?}\n         */\n        function () {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._labelPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"disabled\", {\n        /** Whether the radio button is disabled. */\n        get: /**\n         * Whether the radio button is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newDisabledState = coerceBooleanProperty(value);\n            if (this._disabled !== newDisabledState) {\n                this._disabled = newDisabledState;\n                this._changeDetector.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"required\", {\n        /** Whether the radio button is required. */\n        get: /**\n         * Whether the radio button is required.\n         * @return {?}\n         */\n        function () {\n            return this._required || (this.radioGroup && this.radioGroup.required);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatRadioButton.prototype, \"inputId\", {\n        /** ID of the native input element inside `<mat-radio-button>` */\n        get: /**\n         * ID of the native input element inside `<mat-radio-button>`\n         * @return {?}\n         */\n        function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    /** Focuses the radio button. */\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    MatRadioButton.prototype.focus = /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    function () {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    };\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    MatRadioButton.prototype._markForCheck = /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    function () {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    };\n    /**\n     * @return {?}\n     */\n    MatRadioButton.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatRadioButton.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (focusOrigin) {\n            if (!focusOrigin && _this.radioGroup) {\n                _this.radioGroup._touch();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatRadioButton.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    };\n    /** Dispatch change event with current value. */\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    MatRadioButton.prototype._emitChangeEvent = /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this.change.emit(new MatRadioChange(this, this._value));\n    };\n    /**\n     * @return {?}\n     */\n    MatRadioButton.prototype._isRippleDisabled = /**\n     * @return {?}\n     */\n    function () {\n        return this.disableRipple || this.disabled;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatRadioButton.prototype._onInputClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    MatRadioButton.prototype._onInputChange = /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            this.radioGroup._touch();\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    };\n    MatRadioButton.decorators = [\n        { type: Component, args: [{selector: 'mat-radio-button',\n                    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n                    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}\"],\n                    inputs: ['color', 'disableRipple', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRadioButton',\n                    host: {\n                        'class': 'mat-radio-button',\n                        '[class.mat-radio-checked]': 'checked',\n                        '[class.mat-radio-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        // Needs to be -1 so the `focus` event still fires.\n                        '[attr.tabindex]': '-1',\n                        '[attr.id]': 'id',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatRadioButton.ctorParameters = function () { return [\n        { type: MatRadioGroup, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: UniqueSelectionDispatcher },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ]; };\n    MatRadioButton.propDecorators = {\n        id: [{ type: Input }],\n        name: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n        checked: [{ type: Input }],\n        value: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }],\n        change: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n    return MatRadioButton;\n}(_MatRadioButtonMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatRadioModule = /** @class */ (function () {\n    function MatRadioModule() {\n    }\n    MatRadioModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule],\n                    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                    declarations: [MatRadioGroup, MatRadioButton],\n                },] },\n    ];\n    return MatRadioModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton };\n//# sourceMappingURL=radio.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nvar matSelectAnimations = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nvar SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar  /**\n * Change event object that is emitted when the select value has changed.\n */\nMatSelectChange = /** @class */ (function () {\n    function MatSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatSelectChange;\n}());\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nvar  \n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nMatSelectBase = /** @class */ (function () {\n    function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatSelectBase;\n}());\n/** @type {?} */\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nvar MatSelectTrigger = /** @class */ (function () {\n    function MatSelectTrigger() {\n    }\n    MatSelectTrigger.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-select-trigger'\n                },] },\n    ];\n    return MatSelectTrigger;\n}());\nvar MatSelect = /** @class */ (function (_super) {\n    __extends(MatSelect, _super);\n    function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        var _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._viewportRuler = _viewportRuler;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._ngZone = _ngZone;\n        _this._dir = _dir;\n        _this._parentFormField = _parentFormField;\n        _this.ngControl = ngControl;\n        _this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        _this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        _this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        _this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        _this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        _this._compareWith = function (o1, o2) { return o1 === o2; };\n        /**\n         * Unique id for this input.\n         */\n        _this._uid = \"mat-select-\" + nextUniqueId++;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        _this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        _this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        _this._onChange = function () { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        _this._onTouched = function () { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        _this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        _this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        _this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        _this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        _this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        _this._disableOptionCentering = false;\n        _this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        _this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        _this.optionSelectionChanges = defer(function () {\n            if (_this.options) {\n                return merge.apply(void 0, _this.options.map(function (option) { return option.onSelectionChange; }));\n            }\n            return _this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        _this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        _this._openedStream = _this.openedChange.pipe(filter(function (o) { return o; }), map(function () { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        _this._closedStream = _this.openedChange.pipe(filter(function (o) { return !o; }), map(function () { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        _this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        if (_this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            _this.ngControl.valueAccessor = _this;\n        }\n        _this._scrollStrategyFactory = scrollStrategyFactory;\n        _this._scrollStrategy = _this._scrollStrategyFactory();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        return _this;\n    }\n    Object.defineProperty(MatSelect.prototype, \"focused\", {\n        /** Whether the select is focused. */\n        get: /**\n         * Whether the select is focused.\n         * @return {?}\n         */\n        function () {\n            return this._focused || this._panelOpen;\n        },\n        /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * @breaking-change 8.0.0\n         */\n        set: /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * \\@breaking-change 8.0.0\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._focused = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"placeholder\", {\n        /** Placeholder to be shown if no value has been selected. */\n        get: /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */\n        function () { return this._placeholder; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"required\", {\n        /** Whether the component is required. */\n        get: /**\n         * Whether the component is required.\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"multiple\", {\n        /** Whether the user should be allowed to select multiple options. */\n        get: /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */\n        function () { return this._multiple; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._selectionModel) {\n                throw getMatSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"disableOptionCentering\", {\n        /** Whether to center the active option over the trigger. */\n        get: /**\n         * Whether to center the active option over the trigger.\n         * @return {?}\n         */\n        function () { return this._disableOptionCentering; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disableOptionCentering = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"compareWith\", {\n        /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get: /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         * @return {?}\n         */\n        function () { return this._compareWith; },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw getMatSelectNonFunctionValueError();\n            }\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"value\", {\n        /** Value of the select control. */\n        get: /**\n         * Value of the select control.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        function (newValue) {\n            if (newValue !== this._value) {\n                this.writeValue(newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"id\", {\n        /** Unique id of the element. */\n        get: /**\n         * Unique id of the element.\n         * @return {?}\n         */\n        function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._id = value || this._uid;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(function () {\n            if (_this.panelOpen) {\n                _this._scrollTop = 0;\n                _this.openedChange.emit(true);\n            }\n            else {\n                _this.openedChange.emit(false);\n                _this.overlayDir.offsetX = 0;\n                _this._changeDetectorRef.markForCheck();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n            event.added.forEach(function (option) { return option.select(); });\n            event.removed.forEach(function (option) { return option.deselect(); });\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n            _this._resetOptions();\n            _this._initializeSelection();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    };\n    /** Toggles the overlay panel open or closed. */\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MatSelect.prototype.toggle = /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    function () {\n        this.panelOpen ? this.close() : this.open();\n    };\n    /** Opens the overlay panel. */\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MatSelect.prototype.open = /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n            if (_this._triggerFontSize && _this.overlayDir.overlayRef &&\n                _this.overlayDir.overlayRef.overlayElement) {\n                _this.overlayDir.overlayRef.overlayElement.style.fontSize = _this._triggerFontSize + \"px\";\n            }\n        });\n    };\n    /** Closes the overlay panel and focuses the host element. */\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MatSelect.prototype.close = /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    function () {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MatSelect.prototype.writeValue = /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    function (value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnChange = /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    function (fn) {\n        this._onChange = fn;\n    };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnTouched = /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MatSelect.prototype.setDisabledState = /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    };\n    Object.defineProperty(MatSelect.prototype, \"panelOpen\", {\n        /** Whether or not the overlay panel is open. */\n        get: /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */\n        function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"selected\", {\n        /** The currently selected option. */\n        get: /**\n         * The currently selected option.\n         * @return {?}\n         */\n        function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"triggerValue\", {\n        /** The value displayed in the trigger. */\n        get: /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */\n        function () {\n            if (this.empty) {\n                return '';\n            }\n            if (this._multiple) {\n                /** @type {?} */\n                var selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the element is in RTL mode. */\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MatSelect.prototype._isRtl = /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    function () {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    };\n    /** Handles all keydown events on the select. */\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleKeydown = /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    };\n    /** Handles keyboard events while the select is closed. */\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleClosedKeydown = /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        var manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            var selectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption !== this.selected) {\n                this._liveAnnouncer.announce(((/** @type {?} */ (this.selected))).viewValue);\n            }\n        }\n    };\n    /** Handles keyboard events when the selected is open. */\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleOpenKeydown = /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        var manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });\n            this.options.forEach(function (option) {\n                if (!option.disabled) {\n                    hasDeselectedOptions_1 ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            /** @type {?} */\n            var previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype._onFocus = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MatSelect.prototype._onBlur = /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    function () {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    MatSelect.prototype._onAttached = /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n            _this._setPseudoCheckboxPaddingSize();\n            _this._changeDetectorRef.detectChanges();\n            _this._calculateOverlayOffsetX();\n            _this.panel.nativeElement.scrollTop = _this._scrollTop;\n        });\n    };\n    /** Returns the theme to be used on the panel. */\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    MatSelect.prototype._getPanelTheme = /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    function () {\n        return this._parentFormField ? \"mat-\" + this._parentFormField.color : '';\n    };\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._setPseudoCheckboxPaddingSize = \n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            var pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    };\n    Object.defineProperty(MatSelect.prototype, \"empty\", {\n        /** Whether the select has a value. */\n        get: /**\n         * Whether the select has a value.\n         * @return {?}\n         */\n        function () {\n            return !this._selectionModel || this._selectionModel.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._initializeSelection = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n            _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);\n            _this.stateChanges.next();\n        });\n    };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatSelect.prototype._setSelectionByValue = /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            var correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    MatSelect.prototype._selectValue = /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var correspondingOption = this.options.find(function (option) {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && _this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    };\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._initKeyManager = /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            _this.focus();\n            _this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n            if (_this._panelOpen && _this.panel) {\n                _this._scrollActiveOptionIntoView();\n            }\n            else if (!_this._panelOpen && !_this.multiple && _this._keyManager.activeItem) {\n                _this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    };\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._resetOptions = /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n            _this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !_this.multiple && _this._panelOpen) {\n                _this.close();\n                _this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge.apply(void 0, this.options.map(function (option) { return option._stateChanges; })).pipe(takeUntil(changedOrDestroyed))\n            .subscribe(function () {\n            _this._changeDetectorRef.markForCheck();\n            _this.stateChanges.next();\n        });\n        this._setOptionIds();\n    };\n    /** Invoked when an option is clicked. */\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    MatSelect.prototype._onSelect = /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    function (option, isUserInput) {\n        /** @type {?} */\n        var wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    };\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._sortValues = /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.multiple) {\n            /** @type {?} */\n            var options_1 = this.options.toArray();\n            this._selectionModel.sort(function (a, b) {\n                return _this.sortComparator ? _this.sortComparator(a, b, options_1) :\n                    options_1.indexOf(a) - options_1.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    };\n    /** Emits change event to set the model value. */\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    MatSelect.prototype._propagateChanges = /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    function (fallbackValue) {\n        /** @type {?} */\n        var valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map(function (option) { return option.value; });\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Records option IDs to pass to the aria-owns property. */\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._setOptionIds = /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n    };\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._highlightCorrectOption = /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    };\n    /** Scrolls the active option into view. */\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._scrollActiveOptionIntoView = /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    };\n    /** Focuses the select element. */\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    MatSelect.prototype.focus = /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    function () {\n        this._elementRef.nativeElement.focus();\n    };\n    /** Gets the index of the provided option in the option list. */\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelect.prototype._getOptionIndex = /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    function (option) {\n        return this.options.reduce(function (result, current, index) {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    };\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayPosition = /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var items = this._getItemCount();\n        /** @type {?} */\n        var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        var scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        var maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        var selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        var scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayScroll = /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        var halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    };\n    /** Returns the aria-label of the select component. */\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabel = /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    function () {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    };\n    /** Returns the aria-labelledby of the select component. */\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabelledby = /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    function () {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    };\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaActiveDescendant = /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    function () {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    };\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetX = /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        var viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        /** @type {?} */\n        var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        var offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            var selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        var rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    };\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetY = /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        var optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._checkOverlayWithinViewport = /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (maxScroll) {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        var panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    };\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelUp = /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    function (panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% bottom 0px\";\n        }\n    };\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelDown = /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    function (panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = \"50% top 0px\";\n            return;\n        }\n    };\n    /** Sets the transform origin point based on the selected option. */\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getOriginBasedOnOption = /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var itemHeight = this._getItemHeight();\n        /** @type {?} */\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return \"50% \" + originY + \"px 0px\";\n    };\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getItemCount = /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this.options.length + this.optionGroups.length;\n    };\n    /** Calculates the height of the select's options. */\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    MatSelect.prototype._getItemHeight = /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    MatSelect.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        this._ariaDescribedby = ids.join(' ');\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatSelect.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this.focus();\n        this.open();\n    };\n    Object.defineProperty(MatSelect.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            return this._panelOpen || !this.empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatSelect.decorators = [\n        { type: Component, args: [{selector: 'mat-select',\n                    exportAs: 'matSelect',\n                    template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></ng-template>\",\n                    styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                    inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'role': 'listbox',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-label]': '_getAriaLabel()',\n                        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        'class': 'mat-select',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    },\n                    animations: [\n                        matSelectAnimations.transformPanel\n                    ],\n                    providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    MatSelect.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: ErrorStateMatcher },\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }] },\n        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n        { type: LiveAnnouncer }\n    ]; };\n    MatSelect.propDecorators = {\n        trigger: [{ type: ViewChild, args: ['trigger',] }],\n        panel: [{ type: ViewChild, args: ['panel',] }],\n        overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n        options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n        optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n        panelClass: [{ type: Input }],\n        customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        multiple: [{ type: Input }],\n        disableOptionCentering: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        value: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        errorStateMatcher: [{ type: Input }],\n        sortComparator: [{ type: Input }],\n        id: [{ type: Input }],\n        openedChange: [{ type: Output }],\n        _openedStream: [{ type: Output, args: ['opened',] }],\n        _closedStream: [{ type: Output, args: ['closed',] }],\n        selectionChange: [{ type: Output }],\n        valueChange: [{ type: Output }]\n    };\n    return MatSelect;\n}(_MatSelectMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatSelectModule = /** @class */ (function () {\n    function MatSelectModule() {\n    }\n    MatSelectModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n                },] },\n    ];\n    return MatSelectModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.es5.js.map\n","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { __extends } from 'tslib';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldCheckbox = /** @class */ (function (_super) {\n    __extends(FormlyFieldCheckbox, _super);\n    function FormlyFieldCheckbox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                indeterminate: true,\n                floatLabel: 'always',\n                hideLabel: true,\n                align: 'start',\n            },\n        };\n        return _this;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormlyFieldCheckbox.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this.checkbox.focus();\n        _super.prototype.onContainerClick.call(this, event);\n    };\n    FormlyFieldCheckbox.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-checkbox',\n                    template: \"\\n    <mat-checkbox\\n      [formControl]=\\\"formControl\\\"\\n      [id]=\\\"id\\\"\\n      [formlyAttributes]=\\\"field\\\"\\n      [tabindex]=\\\"to.tabindex || 0\\\"\\n      [indeterminate]=\\\"to.indeterminate && formControl.value === null\\\"\\n      [color]=\\\"to.color\\\"\\n      [labelPosition]=\\\"to.align || to.labelPosition\\\">\\n      {{ to.label }}\\n      <span *ngIf=\\\"to.required && to.hideRequiredMarker !== true\\\" class=\\\"mat-form-field-required-marker\\\">*</span>\\n    </mat-checkbox>\\n  \"\n                }] }\n    ];\n    FormlyFieldCheckbox.propDecorators = {\n        checkbox: [{ type: ViewChild, args: [MatCheckbox,] }]\n    };\n    return FormlyFieldCheckbox;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatCheckboxModule = /** @class */ (function () {\n    function FormlyMatCheckboxModule() {\n    }\n    FormlyMatCheckboxModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldCheckbox],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'checkbox',\n                                    component: FormlyFieldCheckbox,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatCheckboxModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatCheckboxModule, FormlyFieldCheckbox };\n\n//# sourceMappingURL=ngx-formly-material-checkbox.js.map","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { __extends } from 'tslib';\nimport { ViewChild, Type, Component, Renderer2, ElementRef, ViewContainerRef, NgModule } from '@angular/core';\nimport { FieldType, ɵdefineHiddenProp, FieldWrapper, FormlyModule } from '@ngx-formly/core';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyErrorStateMatcher = /** @class */ (function () {\n    function FormlyErrorStateMatcher(field) {\n        this.field = field;\n    }\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    FormlyErrorStateMatcher.prototype.isErrorState = /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    function (control, form) {\n        return this.field && this.field.showError;\n    };\n    return FormlyErrorStateMatcher;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nvar FieldType$1 = /** @class */ (function (_super) {\n    __extends(FieldType$$1, _super);\n    function FieldType$$1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.errorStateMatcher = new FormlyErrorStateMatcher(_this);\n        _this.stateChanges = new Subject();\n        _this._errorState = false;\n        return _this;\n    }\n    Object.defineProperty(FieldType$$1.prototype, \"formFieldControl\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._control || this; },\n        set: /**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            this._control = control;\n            if (this.formField && control !== this.formField._control) {\n                this.formField._control = control;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FieldType$$1.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formField) {\n            this.formField._control = this.formFieldControl;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FieldType$$1.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.matPrefix || this.matSuffix) {\n            setTimeout((/**\n             * @return {?}\n             */\n            function () {\n                ɵdefineHiddenProp(_this.field, '_matprefix', _this.matPrefix);\n                ɵdefineHiddenProp(_this.field, '_matsuffix', _this.matSuffix);\n                ((/** @type {?} */ (_this.options)))._markForCheck(_this.field);\n            }));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FieldType$$1.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formField) {\n            delete this.formField._control;\n        }\n        this.stateChanges.complete();\n    };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    FieldType$$1.prototype.setDescribedByIds = /**\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) { };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FieldType$$1.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this.field.focus = true;\n        this.stateChanges.next();\n    };\n    Object.defineProperty(FieldType$$1.prototype, \"errorState\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);\n            if (showError !== this._errorState) {\n                this._errorState = showError;\n                this.stateChanges.next();\n            }\n            return showError;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"controlType\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this.to.type) {\n                return this.to.type;\n            }\n            if (((/** @type {?} */ (this.field.type))) instanceof Type) {\n                return (/** @type {?} */ (this.field.type)).constructor.name;\n            }\n            return (/** @type {?} */ (this.field.type));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"focused\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.field.focus && !this.disabled; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.to.disabled; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.to.required; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"placeholder\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.to.placeholder || ''; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"shouldPlaceholderFloat\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.shouldLabelFloat; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.formControl.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.formControl.patchValue(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"ngControl\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (/** @type {?} */ (this.formControl)); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"empty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.value === undefined || this.value === null || this.value === ''; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"shouldLabelFloat\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.focused || !this.empty; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FieldType$$1.prototype, \"formField\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.field ? ((/** @type {?} */ (this.field)))['__formField__'] : null; },\n        enumerable: true,\n        configurable: true\n    });\n    FieldType$$1.propDecorators = {\n        matPrefix: [{ type: ViewChild, args: ['matPrefix',] }],\n        matSuffix: [{ type: ViewChild, args: ['matSuffix',] }]\n    };\n    return FieldType$$1;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyWrapperFormField = /** @class */ (function (_super) {\n    __extends(FormlyWrapperFormField, _super);\n    function FormlyWrapperFormField(renderer, elementRef, focusMonitor) {\n        var _this = _super.call(this) || this;\n        _this.renderer = renderer;\n        _this.elementRef = elementRef;\n        _this.focusMonitor = focusMonitor;\n        _this.stateChanges = new Subject();\n        _this._errorState = false;\n        _this.initialGapCalculated = false;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.formField._control = this;\n        ɵdefineHiddenProp(this.field, '__formField__', this.formField);\n        /** @type {?} */\n        var fieldComponent = this.formlyField['_componentFactory'];\n        if (fieldComponent && !(fieldComponent.componentRef.instance instanceof FieldType$1)) {\n            console.warn(\"Component '\" + fieldComponent.component.prototype.constructor.name + \"' must extend 'FieldType' from '@ngx-formly/material'.\");\n        }\n        // fix for https://github.com/angular/material2/issues/11437\n        if (this.formlyField.hide && (/** @type {?} */ (this.formlyField.templateOptions)).appearance === 'outline') {\n            this.initialGapCalculated = true;\n        }\n        this.focusMonitor.monitor(this.elementRef, true).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        function (origin) {\n            if (!origin && _this.field.focus) {\n                _this.field.focus = false;\n            }\n            _this.stateChanges.next();\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.initialGapCalculated || this.formlyField.hide) {\n            return;\n        }\n        this.formField.updateOutlineGap();\n        this.initialGapCalculated = true;\n    };\n    /**\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        // temporary fix for https://github.com/angular/material2/issues/7891\n        if (this.formField.appearance !== 'outline' && this.to.hideFieldUnderline === true) {\n            /** @type {?} */\n            var underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n            underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        delete this.formlyField.__formField__;\n        this.stateChanges.complete();\n        this.focusMonitor.stopMonitoring(this.elementRef);\n    };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.setDescribedByIds = /**\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) { };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormlyWrapperFormField.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this.formlyField.focus = true;\n        this.stateChanges.next();\n    };\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"errorState\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);\n            if (showError !== this._errorState) {\n                this._errorState = showError;\n                this.stateChanges.next();\n            }\n            return showError;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"controlType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.to.type; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"focused\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.formlyField.focus && !this.disabled; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.to.disabled; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !!this.to.required; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"placeholder\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.to.placeholder || ''; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"shouldPlaceholderFloat\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.shouldLabelFloat; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.formControl.value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"ngControl\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (/** @type {?} */ (this.formControl)); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"empty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !this.formControl.value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"shouldLabelFloat\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.focused || !this.empty; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormlyWrapperFormField.prototype, \"formlyField\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (/** @type {?} */ (this.field)); },\n        enumerable: true,\n        configurable: true\n    });\n    FormlyWrapperFormField.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-wrapper-mat-form-field',\n                    template: \"\\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\\n    <mat-form-field\\n      [hideRequiredMarker]=\\\"true\\\"\\n      [floatLabel]=\\\"to.floatLabel\\\"\\n      [appearance]=\\\"to.appearance\\\"\\n      [color]=\\\"to.color\\\"\\n      [style.width]=\\\"'100%'\\\">\\n      <ng-container #fieldComponent></ng-container>\\n      <mat-label *ngIf=\\\"to.label && to.hideLabel !== true\\\">\\n        {{ to.label }}\\n        <span *ngIf=\\\"to.required && to.hideRequiredMarker !== true\\\" class=\\\"mat-form-field-required-marker\\\">*</span>\\n      </mat-label>\\n\\n      <ng-container matPrefix>\\n        <ng-container *ngTemplateOutlet=\\\"to.prefix ? to.prefix : formlyField._matprefix\\\"></ng-container>\\n      </ng-container>\\n\\n      <ng-container matSuffix>\\n        <ng-container *ngTemplateOutlet=\\\"to.suffix ? to.suffix : formlyField._matsuffix\\\"></ng-container>\\n      </ng-container>\\n\\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\\n      <mat-error [id]=\\\"null\\\">\\n        <formly-validation-message [field]=\\\"field\\\"></formly-validation-message>\\n      </mat-error>\\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\\n      <mat-hint *ngIf=\\\"to.description\\\" [id]=\\\"null\\\">{{ to.description }}</mat-hint>\\n    </mat-form-field>\\n  \",\n                    providers: [{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }]\n                }] }\n    ];\n    /** @nocollapse */\n    FormlyWrapperFormField.ctorParameters = function () { return [\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: FocusMonitor }\n    ]; };\n    FormlyWrapperFormField.propDecorators = {\n        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }],\n        formField: [{ type: ViewChild, args: [MatFormField, (/** @type {?} */ ({ static: true })),] }]\n    };\n    return FormlyWrapperFormField;\n}(FieldWrapper));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatFormFieldModule = /** @class */ (function () {\n    function FormlyMatFormFieldModule() {\n    }\n    FormlyMatFormFieldModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyWrapperFormField],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        FormlyModule.forChild({\n                            wrappers: [{\n                                    name: 'form-field',\n                                    component: FormlyWrapperFormField,\n                                }],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatFormFieldModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatFormFieldModule, FieldType$1 as FieldType, FormlyWrapperFormField as ɵa };\n\n//# sourceMappingURL=ngx-formly-material-form-field.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { __extends } from 'tslib';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatInput, MatInputModule } from '@angular/material/input';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldInput = /** @class */ (function (_super) {\n    __extends(FormlyFieldInput, _super);\n    function FormlyFieldInput() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(FormlyFieldInput.prototype, \"type\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.to.type || 'text';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FormlyFieldInput.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-input',\n                    template: \"\\n    <input *ngIf=\\\"type !== 'number'; else numberTmp\\\"\\n      matInput\\n      [id]=\\\"id\\\"\\n      [readonly]=\\\"to.readonly\\\"\\n      [type]=\\\"type || 'text'\\\"\\n      [errorStateMatcher]=\\\"errorStateMatcher\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [formlyAttributes]=\\\"field\\\"\\n      [tabindex]=\\\"to.tabindex || 0\\\"\\n      [placeholder]=\\\"to.placeholder\\\">\\n    <ng-template #numberTmp>\\n      <input matInput\\n             [id]=\\\"id\\\"\\n             type=\\\"number\\\"\\n             [readonly]=\\\"to.readonly\\\"\\n             [errorStateMatcher]=\\\"errorStateMatcher\\\"\\n             [formControl]=\\\"formControl\\\"\\n             [formlyAttributes]=\\\"field\\\"\\n             [tabindex]=\\\"to.tabindex || 0\\\"\\n             [placeholder]=\\\"to.placeholder\\\">\\n    </ng-template>\\n  \"\n                }] }\n    ];\n    FormlyFieldInput.propDecorators = {\n        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }]\n    };\n    return FormlyFieldInput;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatInputModule = /** @class */ (function () {\n    function FormlyMatInputModule() {\n    }\n    FormlyMatInputModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldInput],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatInputModule,\n                        FormlyMatFormFieldModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'input',\n                                    component: FormlyFieldInput,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatInputModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatInputModule, FormlyFieldInput };\n\n//# sourceMappingURL=ngx-formly-material-input.js.map","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { __extends, __spread, __assign } from 'tslib';\nimport { Component, ViewChildren, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldMultiCheckbox = /** @class */ (function (_super) {\n    __extends(FormlyFieldMultiCheckbox, _super);\n    function FormlyFieldMultiCheckbox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                options: [],\n            },\n        };\n        return _this;\n    }\n    /**\n     * @param {?} value\n     * @param {?} checked\n     * @return {?}\n     */\n    FormlyFieldMultiCheckbox.prototype.onChange = /**\n     * @param {?} value\n     * @param {?} checked\n     * @return {?}\n     */\n    function (value, checked) {\n        var _a;\n        if (this.to.type === 'array') {\n            this.formControl.patchValue(checked\n                ? __spread((this.formControl.value || []), [value]) : __spread((this.formControl.value || [])).filter((/**\n             * @param {?} o\n             * @return {?}\n             */\n            function (o) { return o !== value; })));\n        }\n        else {\n            this.formControl.patchValue(__assign({}, this.formControl.value, (_a = {}, _a[value] = checked, _a)));\n        }\n        this.formControl.markAsTouched();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormlyFieldMultiCheckbox.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.checkboxes.length) {\n            this.checkboxes.first.focus();\n        }\n        _super.prototype.onContainerClick.call(this, event);\n    };\n    FormlyFieldMultiCheckbox.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-multicheckbox',\n                    template: \"\\n    <ng-container *ngFor=\\\"let option of to.options | formlySelectOptions:field | async; let i = index;\\\">\\n      <mat-checkbox\\n        [id]=\\\"id + '_' + i\\\"\\n        [formlyAttributes]=\\\"field\\\"\\n        [tabindex]=\\\"to.tabindex || 0\\\"\\n        [color]=\\\"to.color\\\"\\n        [labelPosition]=\\\"to.labelPosition\\\"\\n        [checked]=\\\"formControl.value && (this.to.type === 'array' ? formControl.value.includes(option.value) : formControl.value[option.value])\\\"\\n        (change)=\\\"onChange(option.value, $event.checked)\\\">\\n          {{ option.label }}\\n      </mat-checkbox>\\n    </ng-container>\\n  \"\n                }] }\n    ];\n    FormlyFieldMultiCheckbox.propDecorators = {\n        checkboxes: [{ type: ViewChildren, args: [MatCheckbox,] }]\n    };\n    return FormlyFieldMultiCheckbox;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatMultiCheckboxModule = /** @class */ (function () {\n    function FormlyMatMultiCheckboxModule() {\n    }\n    FormlyMatMultiCheckboxModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldMultiCheckbox],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'multicheckbox',\n                                    component: FormlyFieldMultiCheckbox,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatMultiCheckboxModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatMultiCheckboxModule, FormlyFieldMultiCheckbox };\n\n//# sourceMappingURL=ngx-formly-material-multicheckbox.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { __extends } from 'tslib';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatRadioGroup, MatRadioModule } from '@angular/material/radio';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldRadio = /** @class */ (function (_super) {\n    __extends(FormlyFieldRadio, _super);\n    function FormlyFieldRadio() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                options: [],\n            },\n        };\n        return _this;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    FormlyFieldRadio.prototype.onContainerClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.radioGroup._radios.length && !this.radioGroup.selected) {\n            this.radioGroup._radios.first.focus();\n        }\n        _super.prototype.onContainerClick.call(this, event);\n    };\n    FormlyFieldRadio.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-radio',\n                    template: \"\\n    <mat-radio-group\\n      [formControl]=\\\"formControl\\\"\\n      [formlyAttributes]=\\\"field\\\"\\n      [tabindex]=\\\"to.tabindex || 0\\\">\\n      <mat-radio-button *ngFor=\\\"let option of to.options | formlySelectOptions:field | async; let i = index;\\\"\\n        [id]=\\\"id + '_' + i\\\"\\n        [color]=\\\"to.color\\\"\\n        [labelPosition]=\\\"to.labelPosition\\\"\\n        [value]=\\\"option.value\\\">\\n        {{ option.label }}\\n      </mat-radio-button>\\n    </mat-radio-group>\\n  \"\n                }] }\n    ];\n    FormlyFieldRadio.propDecorators = {\n        radioGroup: [{ type: ViewChild, args: [MatRadioGroup,] }]\n    };\n    return FormlyFieldRadio;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatRadioModule = /** @class */ (function () {\n    function FormlyMatRadioModule() {\n    }\n    FormlyMatRadioModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldRadio],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatRadioModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [{\n                                    name: 'radio',\n                                    component: FormlyFieldRadio,\n                                    wrappers: ['form-field'],\n                                }],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatRadioModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatRadioModule, FormlyFieldRadio };\n\n//# sourceMappingURL=ngx-formly-material-radio.js.map","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { __extends, __spread } from 'tslib';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldSelect = /** @class */ (function (_super) {\n    __extends(FormlyFieldSelect, _super);\n    function FormlyFieldSelect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.defaultOptions = {\n            templateOptions: { options: [] },\n        };\n        return _this;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype.getSelectAllState = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        if (this.empty || this.value.length === 0) {\n            return '';\n        }\n        return this.value.length !== this.getSelectAllValue(options).length\n            ? 'indeterminate'\n            : 'checked';\n    };\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype.toggleSelectAll = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        /** @type {?} */\n        var selectAllValue = this.getSelectAllValue(options);\n        this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length\n            ? selectAllValue\n            : []);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype.change = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        if (this.to.change) {\n            this.to.change(this.field, $event);\n        }\n    };\n    /**\n     * @param {?} o1\n     * @param {?} o2\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype.compareWith = /**\n     * @param {?} o1\n     * @param {?} o2\n     * @return {?}\n     */\n    function (o1, o2) {\n        return o1 === o2;\n    };\n    /**\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype._getAriaLabelledby = /**\n     * @return {?}\n     */\n    function () {\n        if (this.to.attributes && this.to.attributes['aria-labelledby']) {\n            return this.to.attributes['aria-labelledby'];\n        }\n        if (this.formField && this.formField._labelId) {\n            return this.formField._labelId;\n        }\n        return null;\n    };\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    FormlyFieldSelect.prototype.getSelectAllValue = /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        if (!this.selectAllValue || options !== this.selectAllValue.options) {\n            /** @type {?} */\n            var flatOptions_1 = [];\n            options.forEach((/**\n             * @param {?} o\n             * @return {?}\n             */\n            function (o) { return o.group\n                ? flatOptions_1.push.apply(flatOptions_1, __spread(o.group)) : flatOptions_1.push(o); }));\n            this.selectAllValue = {\n                options: options,\n                value: flatOptions_1.map((/**\n                 * @param {?} o\n                 * @return {?}\n                 */\n                function (o) { return o.value; })),\n            };\n        }\n        return this.selectAllValue.value;\n    };\n    FormlyFieldSelect.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-select',\n                    template: \"\\n    <ng-template #selectAll let-selectOptions=\\\"selectOptions\\\">\\n      <mat-option (click)=\\\"toggleSelectAll(selectOptions)\\\">\\n        <mat-pseudo-checkbox class=\\\"mat-option-pseudo-checkbox\\\"\\n          [state]=\\\"getSelectAllState(selectOptions)\\\">\\n        </mat-pseudo-checkbox>\\n        {{ to.selectAllOption }}\\n      </mat-option>\\n    </ng-template>\\n\\n    <mat-select [id]=\\\"id\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [formlyAttributes]=\\\"field\\\"\\n      [placeholder]=\\\"to.placeholder\\\"\\n      [tabindex]=\\\"to.tabindex || 0\\\"\\n      [compareWith]=\\\"to.compareWith || compareWith\\\"\\n      [multiple]=\\\"to.multiple\\\"\\n      (selectionChange)=\\\"change($event)\\\"\\n      [errorStateMatcher]=\\\"errorStateMatcher\\\"\\n      [aria-labelledby]=\\\"_getAriaLabelledby()\\\"\\n      [disableOptionCentering]=\\\"to.disableOptionCentering\\\"\\n      >\\n      <ng-container *ngIf=\\\"to.options | formlySelectOptions:field | async as selectOptions\\\">\\n        <ng-container *ngIf=\\\"to.multiple && to.selectAllOption\\\" [ngTemplateOutlet]=\\\"selectAll\\\" [ngTemplateOutletContext]=\\\"{ selectOptions: selectOptions }\\\">\\n        </ng-container>\\n        <ng-container *ngFor=\\\"let item of selectOptions\\\">\\n          <mat-optgroup *ngIf=\\\"item.group\\\" [label]=\\\"item.label\\\">\\n            <mat-option *ngFor=\\\"let child of item.group\\\" [value]=\\\"child.value\\\" [disabled]=\\\"child.disabled\\\">\\n              {{ child.label }}\\n            </mat-option>\\n          </mat-optgroup>\\n          <mat-option *ngIf=\\\"!item.group\\\" [value]=\\\"item.value\\\" [disabled]=\\\"item.disabled\\\">{{ item.label }}</mat-option>\\n        </ng-container>\\n      </ng-container>\\n    </mat-select>\\n  \"\n                }] }\n    ];\n    FormlyFieldSelect.propDecorators = {\n        formFieldControl: [{ type: ViewChild, args: [MatSelect, (/** @type {?} */ ({ static: true })),] }]\n    };\n    return FormlyFieldSelect;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatSelectModule = /** @class */ (function () {\n    function FormlyMatSelectModule() {\n    }\n    FormlyMatSelectModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldSelect],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatSelectModule,\n                        MatPseudoCheckboxModule,\n                        FormlyMatFormFieldModule,\n                        FormlySelectModule,\n                        FormlyModule.forChild({\n                            types: [{\n                                    name: 'select',\n                                    component: FormlyFieldSelect,\n                                    wrappers: ['form-field'],\n                                }],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatSelectModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatSelectModule, FormlyFieldSelect };\n\n//# sourceMappingURL=ngx-formly-material-select.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { __extends } from 'tslib';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatInput, MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyFieldTextArea = /** @class */ (function (_super) {\n    __extends(FormlyFieldTextArea, _super);\n    function FormlyFieldTextArea() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.defaultOptions = {\n            templateOptions: {\n                cols: 1,\n                rows: 1,\n            },\n        };\n        return _this;\n    }\n    FormlyFieldTextArea.decorators = [\n        { type: Component, args: [{\n                    selector: 'formly-field-mat-textarea',\n                    template: \"\\n    <textarea matInput\\n      [id]=\\\"id\\\"\\n      [readonly]=\\\"to.readonly\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [errorStateMatcher]=\\\"errorStateMatcher\\\"\\n      [cols]=\\\"to.cols\\\"\\n      [rows]=\\\"to.rows\\\"\\n      [formlyAttributes]=\\\"field\\\"\\n      [placeholder]=\\\"to.placeholder\\\"\\n      [tabindex]=\\\"to.tabindex || 0\\\"\\n      [readonly]=\\\"to.readonly\\\"\\n      [cdkTextareaAutosize]=\\\"to.autosize\\\"\\n      [cdkAutosizeMinRows]=\\\"to.autosizeMinRows\\\"\\n      [cdkAutosizeMaxRows]=\\\"to.autosizeMaxRows\\\">\\n    </textarea>\\n  \",\n                    providers: [\n                        // fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n                        // rely on formControl value instead of elementRef which return empty value in Firefox.\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },\n                    ]\n                }] }\n    ];\n    FormlyFieldTextArea.propDecorators = {\n        formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }]\n    };\n    return FormlyFieldTextArea;\n}(FieldType));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMatTextAreaModule = /** @class */ (function () {\n    function FormlyMatTextAreaModule() {\n    }\n    FormlyMatTextAreaModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [FormlyFieldTextArea],\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatInputModule,\n                        FormlyMatFormFieldModule,\n                        FormlyModule.forChild({\n                            types: [\n                                {\n                                    name: 'textarea',\n                                    component: FormlyFieldTextArea,\n                                    wrappers: ['form-field'],\n                                },\n                            ],\n                        }),\n                    ],\n                },] }\n    ];\n    return FormlyMatTextAreaModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatTextAreaModule, FormlyFieldTextArea };\n\n//# sourceMappingURL=ngx-formly-material-textarea.js.map","import { NgModule } from '@angular/core';\nimport { FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nexport { FieldType } from '@ngx-formly/material/form-field';\nimport { FormlyMatInputModule } from '@ngx-formly/material/input';\nimport { FormlyMatTextAreaModule } from '@ngx-formly/material/textarea';\nimport { FormlyMatRadioModule } from '@ngx-formly/material/radio';\nimport { FormlyMatCheckboxModule } from '@ngx-formly/material/checkbox';\nimport { FormlyMatMultiCheckboxModule } from '@ngx-formly/material/multicheckbox';\nimport { FormlyMatSelectModule } from '@ngx-formly/material/select';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar FormlyMaterialModule = /** @class */ (function () {\n    function FormlyMaterialModule() {\n    }\n    FormlyMaterialModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        FormlyMatFormFieldModule,\n                        FormlyMatInputModule,\n                        FormlyMatTextAreaModule,\n                        FormlyMatRadioModule,\n                        FormlyMatCheckboxModule,\n                        FormlyMatMultiCheckboxModule,\n                        FormlyMatSelectModule,\n                    ],\n                },] }\n    ];\n    return FormlyMaterialModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMaterialModule };\n\n//# sourceMappingURL=ngx-formly-material.js.map"],"sourceRoot":""}